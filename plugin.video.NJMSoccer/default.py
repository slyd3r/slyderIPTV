import base64;exec base64.b64decode('import urllib
import urllib2
import datetime
import re
import os
import xbmcplugin
import xbmcgui
import xbmcaddon
import xbmcvfs
import traceback
import cookielib
from addon . common . net import Net
from BeautifulSoup import BeautifulStoneSoup , BeautifulSoup , BeautifulSOAP
try :
 import json
except :
 import simplejson as json
import SimpleDownloader as downloader
import time
import requests
if 64 - 64: i11iIiiIii
if 65 - 65: O0 / iIii1I11I1II1 % OoooooooOO - i1IIi
o0OO00 = Net ( user_agent = 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36' )
oo = {
 'Accept' : 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
 }
if 27 - 27: oO0OooOoO * o0Oo
i1IiI1I11 = [ '180upload.com' , 'allmyvideos.net' , 'bestreams.net' , 'clicknupload.com' , 'cloudzilla.to' , 'movshare.net' , 'novamov.com' , 'nowvideo.sx' , 'videoweed.es' , 'daclips.in' , 'datemule.com' , 'fastvideo.in' , 'faststream.in' , 'filehoot.com' , 'filenuke.com' , 'sharesix.com' , 'docs.google.com' , 'plus.google.com' , 'picasaweb.google.com' , 'gorillavid.com' , 'gorillavid.in' , 'grifthost.com' , 'hugefiles.net' , 'ipithos.to' , 'ishared.eu' , 'kingfiles.net' , 'mail.ru' , 'my.mail.ru' , 'videoapi.my.mail.ru' , 'mightyupload.com' , 'mooshare.biz' , 'movdivx.com' , 'movpod.net' , 'movpod.in' , 'movreel.com' , 'mrfile.me' , 'nosvideo.com' , 'openload.io' , 'played.to' , 'bitshare.com' , 'filefactory.com' , 'k2s.cc' , 'oboom.com' , 'rapidgator.net' , 'uploaded.net' , 'primeshare.tv' , 'bitshare.com' , 'filefactory.com' , 'k2s.cc' , 'oboom.com' , 'rapidgator.net' , 'uploaded.net' , 'sharerepo.com' , 'stagevu.com' , 'streamcloud.eu' , 'streamin.to' , 'thefile.me' , 'thevideo.me' , 'tusfiles.net' , 'uploadc.com' , 'zalaa.com' , 'uploadrocket.net' , 'uptobox.com' , 'v-vids.com' , 'veehd.com' , 'vidbull.com' , 'videomega.tv' , 'vidplay.net' , 'vidspot.net' , 'vidto.me' , 'vidzi.tv' , 'vimeo.com' , 'vk.com' , 'vodlocker.com' , 'xfileload.com' , 'xvidstage.com' , 'zettahost.tv' ]
IIiIiII11i = [ 'plugin.video.dramasonline' , 'plugin.video.f4mTester' , 'plugin.video.shahidmbcnet' , 'plugin.video.SportsDevil' , 'plugin.stream.vaughnlive.tv' , 'plugin.video.ZemTV-shani' ]
if 51 - 51: oOo0O0Ooo * I1ii11iIi11i
class I1IiI ( urllib2 . HTTPErrorProcessor ) :
 def http_response ( self , request , response ) :
  return response
 https_response = http_response
 if 73 - 73: OOooOOo / ii11ii1ii
O00ooOO = 'http://njmsoccer.ares-project.com/main.xml'
if 47 - 47: oO0ooO % iI1Ii11111iIi + ii1II11I1ii1I + oO0o0ooO0 - iiIIIII1i1iI
o0oO0 = xbmcaddon . Addon ( 'plugin.video.NJMSoccer' )
oo00 = o0oO0 . getAddonInfo ( 'version' )
o00 = xbmc . translatePath ( o0oO0 . getAddonInfo ( 'profile' ) . decode ( 'utf-8' ) )
Oo0oO0ooo = xbmc . translatePath ( o0oO0 . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
o0oOoO00o = os . path . join ( o00 , 'favorites' )
i1 = os . path . join ( o00 , 'history' )
if 64 - 64: ooO0Oooo00 % Ooo0
oo00000o0 = os . path . join ( o00 , 'list_revision' )
I11i1i11i1I = os . path . join ( Oo0oO0ooo , 'icon.png' )
Iiii = os . path . join ( Oo0oO0ooo , 'fanart.jpg' )
OOO0O = os . path . join ( o00 , 'source_file' )
oo0ooO0oOOOOo = o00
if 71 - 71: O00OoOoo00
downloader = downloader . SimpleDownloader ( )
iIiiI1 = o0oO0 . getSetting ( 'debug' )
if os . path . exists ( o0oOoO00o ) == True :
 OoOooOOOO = open ( o0oOoO00o ) . read ( )
else : OoOooOOOO = [ ]
if os . path . exists ( OOO0O ) == True :
 i11iiII = open ( OOO0O ) . read ( )
else : i11iiII = [ ]
if 34 - 34: oooO % O0 * iI1Ii11111iIi + ii1II11I1ii1I / OOooOOo
if 25 - 25: iiIIIII1i1iI . iIii1I11I1II1 % OoooooooOO + oooO
def o0O0 ( string ) :
#    if debug == 'true':
 if iIiiI1 == 'false' :
  xbmc . log ( "[addon.live.NJMSoccerr3-%s]: %s" % ( oo00 , string ) )
  if 67 - 67: oooO - iI1Ii11111iIi * ii11ii1ii % ii11ii1ii % oO0o0ooO0 * OOooOOo
  if 26 - 26: iiIIIII1i1iI - ii11ii1ii
def ooiii11iII ( url , headers = None ) :
 try :
  if headers is None :
   headers = { 'User-agent' : 'Agent007' }
  i1I111I = urllib2 . Request ( url , None , headers )
  i11I1IIiiIi = urllib2 . urlopen ( i1I111I )
  IiIiIi = i11I1IIiiIi . read ( )
  i11I1IIiiIi . close ( )
  return IiIiIi
 except urllib2 . URLError , II :
  o0O0 ( 'URL: ' + url )
  if hasattr ( II , 'code' ) :
   o0O0 ( 'We failed with error code - %s.' % II . code )
   xbmc . executebuiltin ( "XBMC.Notification(NJMSoccer,We failed with error code - " + str ( II . code ) + ",10000," + I11i1i11i1I + ")" )
  elif hasattr ( II , 'reason' ) :
   o0O0 ( 'We failed to reach a server.' )
   o0O0 ( 'Reason: %s' % II . reason )
   xbmc . executebuiltin ( "XBMC.Notification(NJMSoccer,We failed to reach a server. - " + str ( II . reason ) + ",10000," + I11i1i11i1I + ")" )
   if 14 - 14: oOo0O0Ooo . o0Oo / iiIIIII1i1iI
   if 38 - 38: oO0OooOoO % i11iIiiIii . oooO - ii1II11I1ii1I + iiIIIII1i1iI
def Ooooo0Oo00oO0 ( ) :
 Iiii11I1i1Ii1 ( O00ooOO , '' )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 86 - 86: oooO . o0Oo % oOo0O0Ooo + ii11ii1ii
 if 35 - 35: iIii1I11I1II1 % iI1Ii11111iIi * oO0o0ooO0 % oO0o0ooO0 + oO0OooOoO * ooO0Oooo00
 if 54 - 54: oO0o0ooO0 + Ooo0 / ooO0Oooo00
def IIII ( ) :
 if os . path . exists ( o0oOoO00o ) == True :
  Ii1I ( 'Favorites' , 'url' , 4 , os . path . join ( Oo0oO0ooo , 'resources' , 'favorite.png' ) , Iiii , '' , '' , '' , '' )
 if o0oO0 . getSetting ( "browse_xml_database" ) == "true" :
  Ii1I ( 'XML Database' , 'http://xbmcplus.xb.funpic.de/www-data/filesystem/' , 15 , I11i1i11i1I , Iiii , '' , '' , '' , '' )
 if o0oO0 . getSetting ( "browse_community" ) == "true" :
  Ii1I ( 'Community Files' , 'community_files' , 16 , I11i1i11i1I , Iiii , '' , '' , '' , '' )
 if os . path . exists ( i1 ) == True :
  Ii1I ( 'Search History' , 'history' , 25 , os . path . join ( Oo0oO0ooo , 'resources' , 'favorite.png' ) , Iiii , '' , '' , '' , '' )
 if o0oO0 . getSetting ( "searchyt" ) == "true" :
  Ii1I ( 'Search:Youtube' , 'youtube' , 25 , I11i1i11i1I , Iiii , '' , '' , '' , '' )
 if o0oO0 . getSetting ( "searchDM" ) == "true" :
  Ii1I ( 'Search:dailymotion' , 'dmotion' , 25 , I11i1i11i1I , Iiii , '' , '' , '' , '' )
 if o0oO0 . getSetting ( "PulsarM" ) == "true" :
  Ii1I ( 'Pulsar:IMDB' , 'IMDBidplay' , 27 , I11i1i11i1I , Iiii , '' , '' , '' , '' )
 if os . path . exists ( OOO0O ) == True :
  Oo0o0 = json . loads ( open ( OOO0O , "r" ) . read ( ) )
  if 49 - 49: iI1Ii11111iIi % iiIIIII1i1iI + i1IIi . o0Oo % oO0ooO
  if len ( Oo0o0 ) > 1 :
   for I1i1iii in Oo0o0 :
    if 20 - 20: ii11ii1ii
    if isinstance ( I1i1iii , list ) :
     Ii1I ( I1i1iii [ 0 ] . encode ( 'utf-8' ) , I1i1iii [ 1 ] . encode ( 'utf-8' ) , 1 , I11i1i11i1I , Iiii , '' , '' , '' , '' , 'source' )
    else :
     oO00 = I11i1i11i1I
     ooo = Iiii
     ii1I1i1I = ''
     OOoo0O0 = ''
     credits = ''
     iiiIi1i1I = ''
     if I1i1iii . has_key ( 'thumbnail' ) :
      oO00 = I1i1iii [ 'thumbnail' ]
     if I1i1iii . has_key ( 'fanart' ) :
      ooo = I1i1iii [ 'fanart' ]
     if I1i1iii . has_key ( 'description' ) :
      ii1I1i1I = I1i1iii [ 'description' ]
     if I1i1iii . has_key ( 'date' ) :
      OOoo0O0 = I1i1iii [ 'date' ]
     if I1i1iii . has_key ( 'genre' ) :
      iiiIi1i1I = I1i1iii [ 'genre' ]
     if I1i1iii . has_key ( 'credits' ) :
      credits = I1i1iii [ 'credits' ]
     Ii1I ( I1i1iii [ 'title' ] . encode ( 'utf-8' ) , I1i1iii [ 'url' ] . encode ( 'utf-8' ) , 1 , oO00 , ooo , ii1I1i1I , iiiIi1i1I , OOoo0O0 , credits , 'source' )
     if 80 - 80: OOooOOo - I1ii11iIi11i
  else :
   if len ( Oo0o0 ) == 1 :
    if isinstance ( Oo0o0 [ 0 ] , list ) :
     Iiii11I1i1Ii1 ( Oo0o0 [ 0 ] [ 1 ] . encode ( 'utf-8' ) , Iiii )
    else :
     Iiii11I1i1Ii1 ( Oo0o0 [ 0 ] [ 'url' ] , Oo0o0 [ 0 ] [ 'fanart' ] )
     if 87 - 87: iI1Ii11111iIi / oO0o0ooO0 - i1IIi * ii1II11I1ii1I / OoooooooOO . O0
     if 1 - 1: oO0OooOoO - oO0o0ooO0 / oO0o0ooO0
def I1II1III11iii ( url = None ) :
 if url is None :
  if not o0oO0 . getSetting ( "new_file_source" ) == "" :
   Oo000 = o0oO0 . getSetting ( 'new_file_source' ) . decode ( 'utf-8' )
  elif not o0oO0 . getSetting ( "new_url_source" ) == "" :
   Oo000 = o0oO0 . getSetting ( 'new_url_source' ) . decode ( 'utf-8' )
 else :
  Oo000 = url
 if Oo000 == '' or Oo000 is None :
  return
 o0O0 ( 'Adding New Source: ' + Oo000 . encode ( 'utf-8' ) )
 if 51 - 51: i11iIiiIii . o0Oo + oO0OooOoO
 II111ii1II1i = None
 if 59 - 59: O0 + o0Oo + Ooo0 % o0Oo
 IiIiIi = o0OOoo0OO0OOO ( Oo000 )
 print 'source_url' , Oo000
 if isinstance ( IiIiIi , BeautifulSOAP ) :
  if IiIiIi . find ( 'channels_info' ) :
   II111ii1II1i = IiIiIi . channels_info
  elif IiIiIi . find ( 'items_info' ) :
   II111ii1II1i = IiIiIi . items_info
 if II111ii1II1i :
  iI1iI1I1i1I = { }
  iI1iI1I1i1I [ 'url' ] = Oo000
  try : iI1iI1I1i1I [ 'title' ] = II111ii1II1i . title . string
  except : pass
  try : iI1iI1I1i1I [ 'thumbnail' ] = II111ii1II1i . thumbnail . string
  except : pass
  try : iI1iI1I1i1I [ 'fanart' ] = II111ii1II1i . fanart . string
  except : pass
  try : iI1iI1I1i1I [ 'genre' ] = II111ii1II1i . genre . string
  except : pass
  try : iI1iI1I1i1I [ 'description' ] = II111ii1II1i . description . string
  except : pass
  try : iI1iI1I1i1I [ 'date' ] = II111ii1II1i . date . string
  except : pass
  try : iI1iI1I1i1I [ 'credits' ] = II111ii1II1i . credits . string
  except : pass
 else :
  if '/' in Oo000 :
   iIi11Ii1 = Oo000 . split ( '/' ) [ - 1 ] . split ( '.' ) [ 0 ]
  if '\\' in Oo000 :
   iIi11Ii1 = Oo000 . split ( '\\' ) [ - 1 ] . split ( '.' ) [ 0 ]
  if '%' in iIi11Ii1 :
   iIi11Ii1 = urllib . unquote_plus ( iIi11Ii1 )
  Ii11iII1 = xbmc . Keyboard ( iIi11Ii1 , 'Displayed Name, Rename?' )
  Ii11iII1 . doModal ( )
  if ( Ii11iII1 . isConfirmed ( ) == False ) :
   return
  Oo0O0O0ooO0O = Ii11iII1 . getText ( )
  if len ( Oo0O0O0ooO0O ) == 0 :
   return
  iI1iI1I1i1I = { }
  iI1iI1I1i1I [ 'title' ] = Oo0O0O0ooO0O
  iI1iI1I1i1I [ 'url' ] = Oo000
  iI1iI1I1i1I [ 'fanart' ] = ooo
  if 15 - 15: oO0ooO + OOooOOo - OoooooooOO / ii1II11I1ii1I
 if os . path . exists ( OOO0O ) == False :
  oo000OO00Oo = [ ]
  oo000OO00Oo . append ( iI1iI1I1i1I )
  O0OOO0OOoO0O = open ( OOO0O , "w" )
  O0OOO0OOoO0O . write ( json . dumps ( oo000OO00Oo ) )
  O0OOO0OOoO0O . close ( )
 else :
  Oo0o0 = json . loads ( open ( OOO0O , "r" ) . read ( ) )
  Oo0o0 . append ( iI1iI1I1i1I )
  O0OOO0OOoO0O = open ( OOO0O , "w" )
  O0OOO0OOoO0O . write ( json . dumps ( Oo0o0 ) )
  O0OOO0OOoO0O . close ( )
 o0oO0 . setSetting ( 'new_url_source' , "" )
 o0oO0 . setSetting ( 'new_file_source' , "" )
 xbmc . executebuiltin ( "XBMC.Notification(NJMSoccer,New source added.,5000," + I11i1i11i1I + ")" )
 if not url is None :
  if 'xbmcplus.xb.funpic.de' in url :
   xbmc . executebuiltin ( "XBMC.Container.Update(%s?mode=14,replace)" % sys . argv [ 0 ] )
  elif 'community-links' in url :
   xbmc . executebuiltin ( "XBMC.Container.Update(%s?mode=10,replace)" % sys . argv [ 0 ] )
 else : o0oO0 . openSettings ( )
 if 70 - 70: Ooo0 * oOo0O0Ooo * oO0o0ooO0 / iiIIIII1i1iI
 if 88 - 88: O0
def O0OoO0O00o0oO ( name ) :
 Oo0o0 = json . loads ( open ( OOO0O , "r" ) . read ( ) )
 for I1ii1Ii1 in range ( len ( Oo0o0 ) ) :
  if isinstance ( Oo0o0 [ I1ii1Ii1 ] , list ) :
   if Oo0o0 [ I1ii1Ii1 ] [ 0 ] == name :
    del Oo0o0 [ I1ii1Ii1 ]
    O0OOO0OOoO0O = open ( OOO0O , "w" )
    O0OOO0OOoO0O . write ( json . dumps ( Oo0o0 ) )
    O0OOO0OOoO0O . close ( )
    break
  else :
   if Oo0o0 [ I1ii1Ii1 ] [ 'title' ] == name :
    del Oo0o0 [ I1ii1Ii1 ]
    O0OOO0OOoO0O = open ( OOO0O , "w" )
    O0OOO0OOoO0O . write ( json . dumps ( Oo0o0 ) )
    O0OOO0OOoO0O . close ( )
    break
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 15 - 15: oO0OooOoO / ooO0Oooo00 . O00OoOoo00
 if 68 - 68: I1ii11iIi11i
 if 35 - 35: I1ii11iIi11i - ooO0Oooo00 / oOo0O0Ooo / OOooOOo
def I1i1IiI1 ( url , browse = False ) :
 if url is None :
  url = 'http://xbmcplus.xb.funpic.de/www-data/filesystem/'
 oO0o0OOOO = BeautifulSoup ( ooiii11iII ( url ) , convertEntities = BeautifulSoup . HTML_ENTITIES )
 for I1i1iii in oO0o0OOOO ( 'a' ) :
  O0O0OoOO0 = I1i1iii [ 'href' ]
  if not O0O0OoOO0 . startswith ( '?' ) :
   iiiI1I11i1 = I1i1iii . string
   if iiiI1I11i1 not in [ 'Parent Directory' , 'recycle_bin/' ] :
    if O0O0OoOO0 . endswith ( '/' ) :
     if browse :
      Ii1I ( iiiI1I11i1 , url + O0O0OoOO0 , 15 , I11i1i11i1I , ooo , '' , '' , '' )
     else :
      Ii1I ( iiiI1I11i1 , url + O0O0OoOO0 , 14 , I11i1i11i1I , ooo , '' , '' , '' )
    elif O0O0OoOO0 . endswith ( '.xml' ) :
     if browse :
      Ii1I ( iiiI1I11i1 , url + O0O0OoOO0 , 1 , I11i1i11i1I , ooo , '' , '' , '' , '' , 'download' )
     else :
      if os . path . exists ( OOO0O ) == True :
       if iiiI1I11i1 in i11iiII :
        Ii1I ( iiiI1I11i1 + ' (in use)' , url + O0O0OoOO0 , 11 , I11i1i11i1I , ooo , '' , '' , '' , '' , 'download' )
       else :
        Ii1I ( iiiI1I11i1 , url + O0O0OoOO0 , 11 , I11i1i11i1I , ooo , '' , '' , '' , '' , 'download' )
      else :
       Ii1I ( iiiI1I11i1 , url + O0O0OoOO0 , 11 , I11i1i11i1I , ooo , '' , '' , '' , '' , 'download' )
       if 49 - 49: o0Oo % oooO . oooO . oO0o0ooO0 * oooO
       if 97 - 97: iiIIIII1i1iI + ii11ii1ii . ii1II11I1ii1I + oO0ooO % ooO0Oooo00
def oo0O ( browse = False ) :
 o0 = 'http://community-links.googlecode.com/svn/trunk/'
 oO0o0OOOO = BeautifulSoup ( ooiii11iII ( o0 ) , convertEntities = BeautifulSoup . HTML_ENTITIES )
 oo0oOo = oO0o0OOOO ( 'ul' ) [ 0 ] ( 'li' ) [ 1 : ]
 for I1i1iii in oo0oOo :
  iiiI1I11i1 = I1i1iii ( 'a' ) [ 0 ] [ 'href' ]
  if browse :
   Ii1I ( iiiI1I11i1 , o0 + iiiI1I11i1 , 1 , I11i1i11i1I , ooo , '' , '' , '' , '' , 'download' )
  else :
   Ii1I ( iiiI1I11i1 , o0 + iiiI1I11i1 , 11 , I11i1i11i1I , ooo , '' , '' , '' , '' , 'download' )
   if 89 - 89: OOooOOo
   if 68 - 68: I1ii11iIi11i * OoooooooOO % O0 + I1ii11iIi11i + oooO
def o0OOoo0OO0OOO ( url , data = None ) :
 print 'getsoup' , url , data
 if url . startswith ( 'http://' ) or url . startswith ( 'https://' ) :
  data = ooiii11iII ( url )
  if re . search ( "#EXTM3U" , data ) or 'm3u' in url :
   print 'found m3u data' , data
   return data
   if 4 - 4: oooO + O0 * ii1II11I1ii1I
 elif data == None :
  if xbmcvfs . exists ( url ) :
   if url . startswith ( "smb://" ) or url . startswith ( "nfs://" ) :
    OOoo0O = xbmcvfs . copy ( url , os . path . join ( o00 , 'temp' , 'sorce_temp.txt' ) )
    if OOoo0O :
     data = open ( os . path . join ( o00 , 'temp' , 'sorce_temp.txt' ) , "r" ) . read ( )
     xbmcvfs . delete ( os . path . join ( o00 , 'temp' , 'sorce_temp.txt' ) )
    else :
     o0O0 ( "failed to copy from smb:" )
   else :
    data = open ( url , 'r' ) . read ( )
    if re . match ( "#EXTM3U" , data ) or 'm3u' in url :
     print 'found m3u data' , data
     return data
  else :
   o0O0 ( "Soup Data not found!" )
   return
 return BeautifulSOAP ( data , convertEntities = BeautifulStoneSoup . XML_ENTITIES )
 if 67 - 67: i11iIiiIii - i1IIi % oO0ooO . O0
 if 77 - 77: Ooo0 / o0Oo
def Iiii11I1i1Ii1 ( url , fanart ) :
 print 'url-getData' , url
 I1 = "List"
 if 15 - 15: oO0OooOoO
 oO0o0OOOO = o0OOoo0OO0OOO ( url )
 if 18 - 18: i11iIiiIii . i1IIi % OoooooooOO / O0
 if isinstance ( oO0o0OOOO , BeautifulSOAP ) :
  if len ( oO0o0OOOO ( 'layoutype' ) ) > 0 :
   I1 = "Thumbnail"
   if 75 - 75: OOooOOo % ii11ii1ii % ii11ii1ii . O00OoOoo00
  if len ( oO0o0OOOO ( 'channels' ) ) > 0 :
   III1iII1I1ii = oO0o0OOOO ( 'channel' )
   for oOOo0 in III1iII1I1ii :
    if 54 - 54: O0 - Ooo0 % ii1II11I1ii1I
    if 77 - 77: OOooOOo / o0Oo / I1ii11iIi11i + I1ii11iIi11i . ii1II11I1ii1I
    ii1ii11IIIiiI = ''
    O00OOOoOoo0O = 0
    try :
     ii1ii11IIIiiI = oOOo0 ( 'externallink' ) [ 0 ] . string
     O00OOOoOoo0O = len ( oOOo0 ( 'externallink' ) )
    except : pass
    if 77 - 77: ooO0Oooo00 % ooO0Oooo00 * iI1Ii11111iIi - i11iIiiIii
    if O00OOOoOoo0O > 1 : ii1ii11IIIiiI = ''
    if 93 - 93: OoooooooOO / o0Oo % i11iIiiIii + oO0ooO * I1ii11iIi11i
    iiiI1I11i1 = oOOo0 ( 'name' ) [ 0 ] . string
    I1iI11Ii = oOOo0 ( 'thumbnail' ) [ 0 ] . string
    if I1iI11Ii == None :
     I1iI11Ii = ''
     if 6 - 6: iI1Ii11111iIi
    try :
     if not oOOo0 ( 'fanart' ) :
      if o0oO0 . getSetting ( 'use_thumb' ) == "true" :
       oOOo0oOo0 = I1iI11Ii
      else :
       oOOo0oOo0 = fanart
     else :
      oOOo0oOo0 = oOOo0 ( 'fanart' ) [ 0 ] . string
     if oOOo0oOo0 == None :
      raise
    except :
     oOOo0oOo0 = fanart
     if 49 - 49: oOo0O0Ooo . i11iIiiIii - i1IIi / oO0OooOoO . o0Oo
    try :
     ii1I1i1I = oOOo0 ( 'info' ) [ 0 ] . string
     if ii1I1i1I == None :
      raise
    except :
     ii1I1i1I = ''
     if 1 - 1: oOo0O0Ooo / ii11ii1ii % ooO0Oooo00 * Ooo0 . i11iIiiIii
    try :
     iiiIi1i1I = oOOo0 ( 'genre' ) [ 0 ] . string
     if iiiIi1i1I == None :
      raise
    except :
     iiiIi1i1I = ''
     if 2 - 2: oO0ooO * oO0o0ooO0 - iIii1I11I1II1 + o0Oo . iI1Ii11111iIi % ooO0Oooo00
    try :
     OOoo0O0 = oOOo0 ( 'date' ) [ 0 ] . string
     if OOoo0O0 == None :
      raise
    except :
     OOoo0O0 = ''
     if 92 - 92: ooO0Oooo00
    try :
     credits = oOOo0 ( 'credits' ) [ 0 ] . string
     if credits == None :
      raise
    except :
     credits = ''
     if 25 - 25: oOo0O0Ooo - o0Oo / OoooooooOO / ii11ii1ii
    try :
     if ii1ii11IIIiiI == '' :
      Ii1I ( iiiI1I11i1 . encode ( 'utf-8' , 'ignore' ) , url . encode ( 'utf-8' ) , 2 , I1iI11Ii , oOOo0oOo0 , ii1I1i1I , iiiIi1i1I , OOoo0O0 , credits , True )
     else :
      if 12 - 12: o0Oo * ooO0Oooo00 % i1IIi % iIii1I11I1II1
      Ii1I ( iiiI1I11i1 . encode ( 'utf-8' ) , ii1ii11IIIiiI . encode ( 'utf-8' ) , 1 , I1iI11Ii , oOOo0oOo0 , ii1I1i1I , iiiIi1i1I , OOoo0O0 , None , 'source' )
    except :
     o0O0 ( 'There was a problem adding directory from getData(): ' + iiiI1I11i1 . encode ( 'utf-8' , 'ignore' ) )
  else :
   o0O0 ( 'No Channels: getItems' )
   IIi1I11I1II ( oO0o0OOOO ( 'item' ) , fanart )
 else :
  OooOoooOo ( oO0o0OOOO )
  if 46 - 46: ooO0Oooo00
 if I1 == "Thumbnail" :
  IIIII11I1IiI ( )
  if 16 - 16: iIii1I11I1II1
  if 90 - 90: ii11ii1ii % i1IIi / I1ii11iIi11i
  if 44 - 44: oOo0O0Ooo . I1ii11iIi11i / oO0ooO + iiIIIII1i1iI
  if 65 - 65: O0
  if 68 - 68: ii1II11I1ii1I % O00OoOoo00
def OooOoooOo ( data ) :
 ooO00OO0 = data . rstrip ( )
 i11111IIIII = re . compile ( r'#EXTINF:(.+?),(.*?)[\n\r]+([^\n]+)' ) . findall ( ooO00OO0 )
 iIiii1i111iI1 = len ( i11111IIIII )
 print 'total m3u links' , iIiii1i111iI1
 for i11 , oO0oOo0 , I1I1I in i11111IIIII :
  if 'tvg-logo' in i11 :
   I1iI11Ii = OoOO000 ( i11 , 'tvg-logo=[\'"](.*?)[\'"]' )
   if I1iI11Ii :
    if I1iI11Ii . startswith ( 'http' ) :
     I1iI11Ii = I1iI11Ii
     if 14 - 14: Ooo0 - oO0ooO
    elif not o0oO0 . getSetting ( 'logo-folderPath' ) == "" :
     Ii1i1iI1iIIi = o0oO0 . getSetting ( 'logo-folderPath' )
     I1iI11Ii = Ii1i1iI1iIIi + I1iI11Ii
     if 6 - 6: oooO / i11iIiiIii + ooO0Oooo00 * iI1Ii11111iIi
    else :
     I1iI11Ii = I1iI11Ii
     if 80 - 80: oO0OooOoO
     if 83 - 83: oO0o0ooO0 . i11iIiiIii + oO0OooOoO . ii11ii1ii * oO0o0ooO0
  else :
   I1iI11Ii = ''
  if 'type' in i11 :
   oooO0 = OoOO000 ( i11 , 'type=[\'"](.*?)[\'"]' )
   if oooO0 == 'yt-dl' :
    I1I1I = I1I1I + "&mode=18"
   elif oooO0 == 'regex' :
    o0 = I1I1I . split ( '&regexs=' )
    if 46 - 46: O00OoOoo00
    oooOOoOO = IIOOOO0oo0 ( o0OOoo0OO0OOO ( '' , data = o0 [ 1 ] ) )
    if 35 - 35: iiIIIII1i1iI - o0Oo % ii11ii1ii . OoooooooOO % iiIIIII1i1iI
    I1i1Iiiii ( o0 [ 0 ] , oO0oOo0 , I1iI11Ii , '' , '' , '' , '' , '' , None , oooOOoOO , iIiii1i111iI1 )
    continue
  I1i1Iiiii ( I1I1I , oO0oOo0 , I1iI11Ii , '' , '' , '' , '' , '' , None , '' , iIiii1i111iI1 )
  if 94 - 94: ii11ii1ii * iiIIIII1i1iI / oOo0O0Ooo / iiIIIII1i1iI
 xbmc . executebuiltin ( "Container.SetViewMode(50)" )
 if 87 - 87: oOo0O0Ooo . Ooo0
def O0OO0O ( name , url , fanart ) :
 oO0o0OOOO = o0OOoo0OO0OOO ( url )
 OO = oO0o0OOOO . find ( 'channel' , attrs = { 'name' : name . decode ( 'utf-8' ) } )
 OoOoO = OO ( 'item' )
 try :
  oOOo0oOo0 = OO ( 'fanart' ) [ 0 ] . string
  if oOOo0oOo0 == None :
   raise
 except :
  oOOo0oOo0 = fanart
 for oOOo0 in OO ( 'subchannel' ) :
  name = oOOo0 ( 'name' ) [ 0 ] . string
  try :
   I1iI11Ii = oOOo0 ( 'thumbnail' ) [ 0 ] . string
   if I1iI11Ii == None :
    raise
  except :
   I1iI11Ii = ''
  try :
   if not oOOo0 ( 'fanart' ) :
    if o0oO0 . getSetting ( 'use_thumb' ) == "true" :
     oOOo0oOo0 = I1iI11Ii
   else :
    oOOo0oOo0 = oOOo0 ( 'fanart' ) [ 0 ] . string
   if oOOo0oOo0 == None :
    raise
  except :
   pass
  try :
   ii1I1i1I = oOOo0 ( 'info' ) [ 0 ] . string
   if ii1I1i1I == None :
    raise
  except :
   ii1I1i1I = ''
   if 43 - 43: i11iIiiIii + oOo0O0Ooo * oO0OooOoO * O00OoOoo00 * O0
  try :
   iiiIi1i1I = oOOo0 ( 'genre' ) [ 0 ] . string
   if iiiIi1i1I == None :
    raise
  except :
   iiiIi1i1I = ''
   if 64 - 64: ii1II11I1ii1I % iIii1I11I1II1 * iI1Ii11111iIi
  try :
   OOoo0O0 = oOOo0 ( 'date' ) [ 0 ] . string
   if OOoo0O0 == None :
    raise
  except :
   OOoo0O0 = ''
   if 79 - 79: O0
  try :
   credits = oOOo0 ( 'credits' ) [ 0 ] . string
   if credits == None :
    raise
  except :
   credits = ''
   if 78 - 78: oO0ooO + ii1II11I1ii1I - O00OoOoo00
  try :
   Ii1I ( name . encode ( 'utf-8' , 'ignore' ) , url . encode ( 'utf-8' ) , 3 , I1iI11Ii , oOOo0oOo0 , ii1I1i1I , iiiIi1i1I , credits , OOoo0O0 )
  except :
   o0O0 ( 'There was a problem adding directory - ' + name . encode ( 'utf-8' , 'ignore' ) )
 IIi1I11I1II ( OoOoO , oOOo0oOo0 )
 if 38 - 38: ii11ii1ii - iI1Ii11111iIi + iIii1I11I1II1 / OOooOOo % oOo0O0Ooo
 if 57 - 57: I1ii11iIi11i / oooO
def Ii1I1Ii ( name , url , fanart ) :
 oO0o0OOOO = o0OOoo0OO0OOO ( url )
 OO = oO0o0OOOO . find ( 'subchannel' , attrs = { 'name' : name . decode ( 'utf-8' ) } )
 OoOoO = OO ( 'subitem' )
 IIi1I11I1II ( OoOoO , fanart )
 if 69 - 69: o0Oo / ii11ii1ii . Ooo0 * O00OoOoo00 % iiIIIII1i1iI - ii11ii1ii
 if 13 - 13: iiIIIII1i1iI . i11iIiiIii
def oOOoo00O00o ( name , url , iconimage , fanart ) :
 O0O00Oo = [ ] ; oooooo0O000o = [ ] ; OoO = 0
 ooO0O0O0ooOOO = oOOo0O00o ( url , 'sublink:' , '#' )
 for iIiIi11 in ooO0O0O0ooOOO :
  if 'LISTSOURCE:' in iIiIi11 :
   OOO = iiiiI ( iIiIi11 , 'LISTSOURCE:' , '::' )
   oooOo0OOOoo0 = iiiiI ( iIiIi11 , 'LISTNAME:' , '::' )
  else :
   OOO = iIiIi11 . replace ( 'sublink:' , '' ) . replace ( '#' , '' )
   oooOo0OOOoo0 = name
  if len ( OOO ) > 10 :
   OoO = OoO + 1 ; O0O00Oo . append ( oooOo0OOOoo0 ) ; oooooo0O000o . append ( OOO )
   if 51 - 51: oOo0O0Ooo / OOooOOo . ii1II11I1ii1I * ii11ii1ii + I1ii11iIi11i * Ooo0
 if OoO == 1 :
  try :
   OOOoOo = xbmcgui . ListItem ( name , iconImage = iconimage , thumbnailImage = iconimage ) ; OOOoOo . setInfo ( type = "Video" , infoLabels = { "Title" : name } )
   O00o0 = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = oooooo0O000o [ 0 ] , listitem = OOOoOo )
   xbmc . Player ( ) . play ( I11iII ( oooooo0O000o [ 0 ] ) , OOOoOo )
  except :
   pass
 else :
  iIIII = xbmcgui . Dialog ( )
  I11 = iIIII . select ( 'NJMSoccer Select A Source' , O0O00Oo )
  if I11 >= 0 :
   iI1i1I11I11 = str ( O0O00Oo [ I11 ] )
   o000O0O = str ( oooooo0O000o [ I11 ] )
   if 18 - 18: ooO0Oooo00 - ii1II11I1ii1I . O00OoOoo00 . iIii1I11I1II1
   try :
    OOOoOo = xbmcgui . ListItem ( iI1i1I11I11 , iconImage = iconimage , thumbnailImage = iconimage ) ; OOOoOo . setInfo ( type = "Video" , infoLabels = { "Title" : iI1i1I11I11 } )
    O00o0 = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = o000O0O , listitem = OOOoOo )
    xbmc . Player ( ) . play ( I11iII ( o000O0O ) , OOOoOo )
   except :
    pass
    if 2 - 2: ii1II11I1ii1I . I1ii11iIi11i
    if 78 - 78: oO0o0ooO0 * iIii1I11I1II1 . o0Oo / ii11ii1ii - OoooooooOO / O00OoOoo00
def i1I1IiiIi1i ( ) :
 if 29 - 29: o0Oo % o0Oo
 Oo0O0 = 'Name of channel show or movie'
 Ooo0OOoOoO0 = ''
 Ii11iII1 = xbmc . Keyboard ( Ooo0OOoOoO0 , Oo0O0 )
 Ii11iII1 . doModal ( )
 if Ii11iII1 . isConfirmed ( ) :
  Ooo0OOoOoO0 = Ii11iII1 . getText ( ) . replace ( '\n' , '' ) . strip ( )
  if len ( Ooo0OOoOoO0 ) == 0 :
   xbmcgui . Dialog ( ) . ok ( 'NJMSoccer' , 'Nothing Entered' )
   return
   if 70 - 70: iI1Ii11111iIi
 Ooo0OOoOoO0 = Ooo0OOoOoO0 . lower ( )
 O0O00Oo = [ ]
 O0O00Oo . append ( O00ooOO )
 oOOoO0o0oO = 0
 o0Oo0oO0oOO00 = 1
 oo00OO0000oO = 0
 I1II1 = 0
 oooOi1I1i111Ii = xbmcgui . DialogProgress ( )
 oooOi1I1i111Ii . create ( 'NJMSoccer Searching Please wait' , ' ' )
 if 67 - 67: o0Oo . i1IIi
 while o0Oo0oO0oOO00 <> oo00OO0000oO :
  i1i1iI1iiiI = O0O00Oo [ oo00OO0000oO ] . strip ( )
  print 'read this one from file list (' + str ( oo00OO0000oO ) + ')'
  oo00OO0000oO = oo00OO0000oO + 1
  if 51 - 51: o0Oo % O00OoOoo00 . iI1Ii11111iIi / iIii1I11I1II1 / oO0o0ooO0 . iI1Ii11111iIi
  IIIii11 = ''
  try :
   IIIii11 = o0OO00 . http_GET ( i1i1iI1iiiI ) . content
   IIIii11 = IIIii11 . encode ( 'ascii' , 'ignore' ) . decode ( 'ascii' )
   if 9 - 9: O0 % O0 - ii11ii1ii
  except :
   pass
   if 51 - 51: o0Oo . iIii1I11I1II1 - oO0ooO / O0
  if len ( IIIii11 ) < 10 :
   IIIii11 = ''
   oOOoO0o0oO = oOOoO0o0oO + 1
   print '*** PASSED ****' + i1i1iI1iiiI + '  ************* Total Passed Urls: ' + str ( oOOoO0o0oO )
   time . sleep ( .5 )
   if 52 - 52: ii11ii1ii + O0 + ooO0Oooo00 + oOo0O0Ooo % ooO0Oooo00
  OOIi1iI111II1I1 = int ( ( oo00OO0000oO / 300 ) * 100 )
  oOOOOoOO0o = '     Pages Read: ' + str ( oo00OO0000oO ) + '        Matches Found: ' + str ( I1II1 )
  oooOi1I1i111Ii . update ( OOIi1iI111II1I1 , "" , oOOOOoOO0o , "" )
  if 1 - 1: oO0OooOoO
  if oooOi1I1i111Ii . iscanceled ( ) :
   return
   if 68 - 68: ooO0Oooo00 - o0Oo / O00OoOoo00 / oO0o0ooO0
  if len ( IIIii11 ) > 10 :
   I11iiii = oOOo0O00o ( IIIii11 , '<channel>' , '</channel>' )
   for iIiIi11 in I11iiii :
    OOO = iiiiI ( iIiIi11 , '<externallink>' , '</externallink>' )
    if 60 - 60: oO0o0ooO0 . i1IIi + Ooo0 / ii11ii1ii . oO0OooOoO
    if 82 - 82: oO0ooO / o0Oo % iIii1I11I1II1 / i1IIi - o0Oo
    if len ( OOO ) > 5 :
     o0Oo0oO0oOO00 = o0Oo0oO0oOO00 + 1
     O0O00Oo . append ( OOO )
     if 7 - 7: O00OoOoo00 * I1ii11iIi11i - oooO + ii1II11I1ii1I * o0Oo % I1ii11iIi11i
     if 15 - 15: OOooOOo % o0Oo * oO0o0ooO0
   O0OoooO0 = oOOo0O00o ( IIIii11 , '<item>' , '</item>' )
   for iIiIi11 in O0OoooO0 :
    OOO = iiiiI ( iIiIi11 , '<link>' , '</link>' )
    iiiI1I11i1 = iiiiI ( iIiIi11 , '<title>' , '</title>' )
    ooo0O0o00O = '  ' + iiiI1I11i1 . lower ( ) + '  '
    if 48 - 48: oooO / O00OoOoo00 . iIii1I11I1II1 * OOooOOo * iI1Ii11111iIi / i1IIi
    if len ( OOO ) > 5 and ooo0O0o00O . find ( Ooo0OOoOoO0 ) > 0 :
     I1II1 = I1II1 + 1
     ooo = ''
     I1iI11Ii = iiiiI ( iIiIi11 , '<thumbnail>' , '</thumbnail>' )
     ooo = iiiiI ( iIiIi11 , '<fanart>' , '</fanart>' )
     if len ( ooo ) < 5 :
      ooo = I11i1i11i1I
     if OOO . find ( 'sublink' ) > 0 :
      Ii1I ( iiiI1I11i1 , OOO , 30 , I1iI11Ii , ooo , '' , '' , '' , '' )
     else :
      I1i1Iiiii ( str ( OOO ) , iiiI1I11i1 , I1iI11Ii , ooo , '' , '' , '' , True , None , '' , 1 )
      if 92 - 92: oOo0O0Ooo % oOo0O0Ooo - ii11ii1ii / OOooOOo
      if 10 - 10: ooO0Oooo00 + oOo0O0Ooo * oO0ooO + iIii1I11I1II1 / O00OoOoo00 / oO0ooO
 oooOi1I1i111Ii . close ( )
 xbmc . executebuiltin ( "Container.SetViewMode(50)" )
 if 42 - 42: o0Oo
def II1i11I ( data , Searchkey ) :
 ooO00OO0 = data . rstrip ( )
 i11111IIIII = re . compile ( r'#EXTINF:(.+?),(.*?)[\n\r]+([^\n]+)' ) . findall ( ooO00OO0 )
 iIiii1i111iI1 = len ( i11111IIIII )
 print 'total m3u links' , iIiii1i111iI1
 for i11 , oO0oOo0 , I1I1I in i11111IIIII :
  if 'tvg-logo' in i11 :
   I1iI11Ii = OoOO000 ( i11 , 'tvg-logo=[\'"](.*?)[\'"]' )
   if I1iI11Ii :
    if I1iI11Ii . startswith ( 'http' ) :
     I1iI11Ii = I1iI11Ii
     if 50 - 50: OoooooooOO % oO0o0ooO0
    elif not o0oO0 . getSetting ( 'logo-folderPath' ) == "" :
     Ii1i1iI1iIIi = o0oO0 . getSetting ( 'logo-folderPath' )
     I1iI11Ii = Ii1i1iI1iIIi + I1iI11Ii
     if 49 - 49: iI1Ii11111iIi - i11iIiiIii . O00OoOoo00 * iiIIIII1i1iI % ooO0Oooo00 + i1IIi
    else :
     I1iI11Ii = I1iI11Ii
     if 71 - 71: ii11ii1ii
     if 38 - 38: iI1Ii11111iIi % OOooOOo + oO0ooO . i11iIiiIii
  else :
   I1iI11Ii = ''
  if 'type' in i11 :
   oooO0 = OoOO000 ( i11 , 'type=[\'"](.*?)[\'"]' )
   if oooO0 == 'yt-dl' :
    I1I1I = I1I1I + "&mode=18"
   elif oooO0 == 'regex' :
    o0 = I1I1I . split ( '&regexs=' )
    if 53 - 53: i11iIiiIii * ooO0Oooo00
    oooOOoOO = IIOOOO0oo0 ( o0OOoo0OO0OOO ( '' , data = o0 [ 1 ] ) )
    if 68 - 68: iIii1I11I1II1 * iIii1I11I1II1 . ii11ii1ii / oO0OooOoO % oOo0O0Ooo
    I1i1Iiiii ( o0 [ 0 ] , oO0oOo0 , I1iI11Ii , '' , '' , '' , '' , '' , None , oooOOoOO , iIiii1i111iI1 )
    continue
  I1i1Iiiii ( I1I1I , oO0oOo0 , I1iI11Ii , '' , '' , '' , '' , '' , None , '' , iIiii1i111iI1 )
  if 38 - 38: oooO - ii1II11I1ii1I / ooO0Oooo00
def OoOOoooOO0O ( text , pattern ) :
 ooo00Ooo = ""
 try :
  Oo0o0O00 = re . findall ( pattern , text , flags = re . DOTALL )
  ooo00Ooo = Oo0o0O00 [ 0 ]
 except :
  ooo00Ooo = ""
  if 40 - 40: OoooooooOO
 return ooo00Ooo
 if 25 - 25: Ooo0 + iiIIIII1i1iI / oooO . ii11ii1ii % O0 * I1ii11iIi11i
def oOOo0O00o ( text , start_with , end_with ) :
 o0O0oo0OO0O = re . findall ( "(?i)(" + start_with + "[\S\s]+?" + end_with + ")" , text )
 return o0O0oo0OO0O
 if 68 - 68: iI1Ii11111iIi . oO0o0ooO0 % OoooooooOO . oO0o0ooO0
def iiiiI ( text , from_string , to_string , excluding = True ) :
 if excluding :
  try : o0O0oo0OO0O = re . search ( "(?i)" + from_string + "([\S\s]+?)" + to_string , text ) . group ( 1 )
  except : o0O0oo0OO0O = ''
 else :
  try : o0O0oo0OO0O = re . search ( "(?i)(" + from_string + "[\S\s]+?" + to_string + ")" , text ) . group ( 1 )
  except : o0O0oo0OO0O = ''
 return o0O0oo0OO0O
 if 64 - 64: iIii1I11I1II1 / o0Oo . oO0OooOoO + OoooooooOO . I1ii11iIi11i
def IIi1I11I1II ( items , fanart ) :
 iIiii1i111iI1 = len ( items )
 print 'START GET ITEMS *****'
 o0O0 ( 'Total Items: %s' % iIiii1i111iI1 )
 for oO in items :
  IIiIi = False
  OOoOooOoOOOoo = False
  try :
   iiiI1I11i1 = oO ( 'title' ) [ 0 ] . string
   if iiiI1I11i1 is None :
    iiiI1I11i1 = 'unknown?'
  except :
   o0O0 ( 'Name Error' )
   iiiI1I11i1 = ''
   if 25 - 25: OoooooooOO - o0Oo . o0Oo * iI1Ii11111iIi
   if 81 - 81: ooO0Oooo00 + Ooo0
  try :
   if oO ( 'epg' ) :
    if oO . epg_url :
     o0O0 ( 'Get EPG Regex' )
     o0oo0 = oO . epg_url . string
     oOOoO0OoOO = oO . epg_regex . string
     O0O0Oo00 = oOoO00o ( o0oo0 , oOOoO0OoOO )
     if O0O0Oo00 :
      iiiI1I11i1 += ' - ' + O0O0Oo00
    elif oO ( 'epg' ) [ 0 ] . string > 1 :
     iiiI1I11i1 += oO00O0 ( oO ( 'epg' ) [ 0 ] . string )
   else :
    pass
  except :
   o0O0 ( 'EPG Error' )
  try :
   o0 = [ ]
   if len ( oO ( 'link' ) ) > 0 :
    if 36 - 36: iI1Ii11111iIi - iiIIIII1i1iI . oOo0O0Ooo - i11iIiiIii - ii1II11I1ii1I * oOo0O0Ooo
    for I1i1iii in oO ( 'link' ) :
     if not I1i1iii . string == None :
      o0 . append ( I1i1iii . string )
      if 76 - 76: i11iIiiIii + ii11ii1ii / oO0ooO - I1ii11iIi11i - iiIIIII1i1iI + oO0ooO
   elif len ( oO ( 'sportsdevil' ) ) > 0 :
    for I1i1iii in oO ( 'sportsdevil' ) :
     if not I1i1iii . string == None :
      ooI1i = 'plugin://plugin.video.SportsDevil/?mode=1&amp;item=catcher%3dstreams%26url=' + I1i1iii . string
      iIII = oO ( 'referer' ) [ 0 ] . string
      if iIII :
       if 70 - 70: ooO0Oooo00 / iIii1I11I1II1
       ooI1i = ooI1i + '%26referer=' + iIII
      o0 . append ( ooI1i )
   elif len ( oO ( 'plexus' ) ) > 0 :
    for I1i1iii in oO ( 'plexus' ) :
     if not I1i1iii . string == None :
      if 'sop://' in I1i1iii :
       Oo0oooO0oO = 'plugin://program.plexus/?mode=1&url=acestream://' + I1i1iii . string + '&name=My+acestream+channel'
       o0 . append ( Oo0oooO0oO )
      else :
       IiIiII1 = 'plugin://program.plexus/?mode=1&url=acestream://' + I1i1iii . string + '&name=My+acestream+channel'
       o0 . append ( IiIiII1 )
   elif len ( oO ( 'vaughn' ) ) > 0 :
    for I1i1iii in oO ( 'vaughn' ) :
     if not I1i1iii . string == None :
      Iii1iiIi1II = 'plugin://plugin.stream.vaughnlive.tv/?mode=PlayLiveStream&amp;channel=' + I1i1iii . string
      o0 . append ( Iii1iiIi1II )
   elif len ( oO ( 'ilive' ) ) > 0 :
    for I1i1iii in oO ( 'ilive' ) :
     if not I1i1iii . string == None :
      if not 'http' in I1i1iii . string :
       OO0O00oOo = 'plugin://plugin.video.tbh.ilive/?url=http://www.streamlive.to/view/' + I1i1iii . string + '&amp;link=99&amp;mode=iLivePlay'
      else :
       OO0O00oOo = 'plugin://plugin.video.tbh.ilive/?url=' + I1i1iii . string + '&amp;link=99&amp;mode=iLivePlay'
   elif len ( oO ( 'yt-dl' ) ) > 0 :
    for I1i1iii in oO ( 'yt-dl' ) :
     if not I1i1iii . string == None :
      ii1II = I1i1iii . string + '&mode=18'
      o0 . append ( ii1II )
   elif len ( oO ( 'utube' ) ) > 0 :
    for I1i1iii in oO ( 'utube' ) :
     if not I1i1iii . string == None :
      if len ( I1i1iii . string ) == 11 :
       iI1I = 'plugin://plugin.video.youtube/play/?video_id=' + I1i1iii . string
      elif I1i1iii . string . startswith ( 'PL' ) and not '&order=' in I1i1iii . string :
       iI1I = 'plugin://plugin.video.youtube/play/?&order=default&playlist_id=' + I1i1iii . string
      else :
       iI1I = 'plugin://plugin.video.youtube/play/?playlist_id=' + I1i1iii . string
    o0 . append ( iI1I )
   elif len ( oO ( 'imdb' ) ) > 0 :
    for I1i1iii in oO ( 'imdb' ) :
     if not I1i1iii . string == None :
      if o0oO0 . getSetting ( 'genesisorpulsar' ) == '0' :
       OooOoOo = 'plugin://plugin.video.genesis/?action=play&imdb=' + I1i1iii . string
      else :
       OooOoOo = 'plugin://plugin.video.pulsar/movie/tt' + I1i1iii . string + '/play'
      o0 . append ( OooOoOo )
      if 14 - 14: ii11ii1ii * ii1II11I1ii1I + ooO0Oooo00 + O0 + i11iIiiIii
   elif len ( oO ( 'f4m' ) ) > 0 :
    for I1i1iii in oO ( 'f4m' ) :
     if not I1i1iii . string == None :
      if '.f4m' in I1i1iii . string :
       oOoO0 = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( I1i1iii . string )
      elif '.m3u8' in I1i1iii . string :
       oOoO0 = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( I1i1iii . string ) + '&amp;streamtype=HLS'
       if 77 - 77: iIii1I11I1II1 . ooO0Oooo00 % ooO0Oooo00 + i11iIiiIii
      else :
       oOoO0 = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( I1i1iii . string ) + '&amp;streamtype=SIMPLE'
    o0 . append ( oOoO0 )
   elif len ( oO ( 'ftv' ) ) > 0 :
    for I1i1iii in oO ( 'ftv' ) :
     if not I1i1iii . string == None :
      Oo00o0OO0O00o = 'plugin://plugin.video.F.T.V/?name=' + urllib . quote ( iiiI1I11i1 ) + '&url=' + I1i1iii . string + '&mode=125&ch_fanart=na'
     o0 . append ( Oo00o0OO0O00o )
   if len ( o0 ) < 1 :
    raise
  except :
   o0O0 ( 'Error <link> element, Passing:' + iiiI1I11i1 . encode ( 'utf-8' , 'ignore' ) )
   continue
   if 82 - 82: oO0o0ooO0 + OoooooooOO - i1IIi . i1IIi
  IIiIi = False
  if 6 - 6: ii11ii1ii / oO0o0ooO0 / oO0OooOoO
  try :
   IIiIi = oO ( 'externallink' ) [ 0 ] . string
  except : pass
  if 27 - 27: ii1II11I1ii1I * oooO . O00OoOoo00 % Ooo0 * Ooo0 . i1IIi
  if IIiIi :
   O0OOoOOO0oO = [ IIiIi ]
   IIiIi = True
  else :
   IIiIi = False
  try :
   OOoOooOoOOOoo = oO ( 'jsonrpc' ) [ 0 ] . string
  except : pass
  if OOoOooOoOOOoo :
   O0OOoOOO0oO = [ OOoOooOoOOOoo ]
   OOoOooOoOOOoo = True
  else :
   OOoOooOoOOOoo = False
  try :
   I1iI11Ii = oO ( 'thumbnail' ) [ 0 ] . string
   if I1iI11Ii == None :
    raise
  except :
   I1iI11Ii = ''
  try :
   if not oO ( 'fanart' ) :
    if o0oO0 . getSetting ( 'use_thumb' ) == "true" :
     oOOo0oOo0 = I1iI11Ii
    else :
     oOOo0oOo0 = fanart
   else :
    oOOo0oOo0 = oO ( 'fanart' ) [ 0 ] . string
   if oOOo0oOo0 == None :
    raise
  except :
   oOOo0oOo0 = fanart
  try :
   ii1I1i1I = oO ( 'info' ) [ 0 ] . string
   if ii1I1i1I == None :
    raise
  except :
   ii1I1i1I = ''
   if 28 - 28: oooO + i11iIiiIii / oO0o0ooO0 % OOooOOo % oOo0O0Ooo - O0
  try :
   iiiIi1i1I = oO ( 'genre' ) [ 0 ] . string
   if iiiIi1i1I == None :
    raise
  except :
   iiiIi1i1I = ''
   if 54 - 54: i1IIi + oO0OooOoO
  try :
   OOoo0O0 = oO ( 'date' ) [ 0 ] . string
   if OOoo0O0 == None :
    raise
  except :
   OOoo0O0 = ''
   if 83 - 83: oO0ooO - o0Oo + ii1II11I1ii1I
  oooOOoOO = None
  if oO ( 'regex' ) :
   try :
    iIi1Ii1i1iI = oO ( 'regex' )
    oooOOoOO = IIOOOO0oo0 ( iIi1Ii1i1iI )
   except :
    pass
    if 16 - 16: ii1II11I1ii1I / oOo0O0Ooo / OoooooooOO * o0Oo + i1IIi % ii1II11I1ii1I
  try :
   if len ( o0 ) > 1 :
    if 71 - 71: OOooOOo
    ii111IiiI1 = 0
    ii11i1iIiII1 = [ ]
    for I1i1iii in o0 :
     if o0oO0 . getSetting ( 'ask_playlist_items' ) == 'true' :
      if oooOOoOO :
       ii11i1iIiII1 . append ( I1i1iii + '&regexs=' + oooOOoOO )
      elif any ( x in I1i1iii for x in i1IiI1I11 ) and I1i1iii . startswith ( 'http' ) :
       ii11i1iIiII1 . append ( I1i1iii + '&mode=19' )
     else :
      ii11i1iIiII1 . append ( I1i1iii )
    if o0oO0 . getSetting ( 'add_playlist' ) == "false" :
     for I1i1iii in o0 :
      ii111IiiI1 += 1
      print 'ADDLINK 1'
      I1i1Iiiii ( I1i1iii , '%s) %s' % ( ii111IiiI1 , iiiI1I11i1 . encode ( 'utf-8' , 'ignore' ) ) , I1iI11Ii , oOOo0oOo0 , ii1I1i1I , iiiIi1i1I , OOoo0O0 , True , ii11i1iIiII1 , oooOOoOO , iIiii1i111iI1 )
    else :
     I1i1Iiiii ( '' , iiiI1I11i1 . encode ( 'utf-8' , 'ignore' ) , I1iI11Ii , oOOo0oOo0 , ii1I1i1I , iiiIi1i1I , OOoo0O0 , True , ii11i1iIiII1 , oooOOoOO , iIiii1i111iI1 )
   else :
    if IIiIi :
     Ii1I ( iiiI1I11i1 . encode ( 'utf-8' ) , O0OOoOOO0oO [ 0 ] . encode ( 'utf-8' ) , 1 , I1iI11Ii , fanart , ii1I1i1I , iiiIi1i1I , OOoo0O0 , None , 'source' )
    elif OOoOooOoOOOoo :
     Ii1I ( iiiI1I11i1 . encode ( 'utf-8' ) , O0OOoOOO0oO [ 0 ] , 53 , I1iI11Ii , fanart , ii1I1i1I , iiiIi1i1I , OOoo0O0 , None , 'source' )
    elif o0 [ 0 ] . find ( 'sublink' ) > 0 :
     Ii1I ( iiiI1I11i1 . encode ( 'utf-8' ) , o0 [ 0 ] , 30 , I1iI11Ii , oOOo0oOo0 , ii1I1i1I , oooOOoOO , '' , '' , '' )
     if 63 - 63: I1ii11iIi11i
    else :
     I1i1Iiiii ( o0 [ 0 ] , iiiI1I11i1 . encode ( 'utf-8' , 'ignore' ) , I1iI11Ii , oOOo0oOo0 , ii1I1i1I , iiiIi1i1I , OOoo0O0 , True , None , oooOOoOO , iIiii1i111iI1 )
     if 69 - 69: iIii1I11I1II1 . oO0ooO % oooO + iIii1I11I1II1 / O0 / oO0ooO
     if 61 - 61: ii1II11I1ii1I % ii1II11I1ii1I * ii11ii1ii / ii11ii1ii
  except :
   o0O0 ( 'There was a problem adding item - ' + iiiI1I11i1 . encode ( 'utf-8' , 'ignore' ) )
 print 'FINISH GET ITEMS *****'
 if 75 - 75: Ooo0 . oooO
def IIOOOO0oo0 ( reg_item ) :
 try :
  oooOOoOO = { }
  for I1i1iii in reg_item :
   oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] = { }
   if 50 - 50: OOooOOo
   try :
    oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'expre' ] = I1i1iii ( 'expres' ) [ 0 ] . string
    if not oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'expre' ] :
     oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'expre' ] = ''
   except :
    o0O0 ( "Regex: -- No Referer --" )
   oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'page' ] = I1i1iii ( 'page' ) [ 0 ] . string
   try :
    oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'refer' ] = I1i1iii ( 'referer' ) [ 0 ] . string
   except :
    o0O0 ( "Regex: -- No Referer --" )
   try :
    oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'connection' ] = I1i1iii ( 'connection' ) [ 0 ] . string
   except :
    o0O0 ( "Regex: -- No connection --" )
    if 60 - 60: oooO * iIii1I11I1II1 * oO0ooO * oOo0O0Ooo
   try :
    oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'notplayable' ] = I1i1iii ( 'notplayable' ) [ 0 ] . string
   except :
    o0O0 ( "Regex: -- No notplayable --" )
    if 69 - 69: iiIIIII1i1iI * O0 . i11iIiiIii / iiIIIII1i1iI . ii11ii1ii
   try :
    oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'noredirect' ] = I1i1iii ( 'noredirect' ) [ 0 ] . string
   except :
    o0O0 ( "Regex: -- No noredirect --" )
   try :
    oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'origin' ] = I1i1iii ( 'origin' ) [ 0 ] . string
   except :
    o0O0 ( "Regex: -- No origin --" )
   try :
    oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'includeheaders' ] = I1i1iii ( 'includeheaders' ) [ 0 ] . string
   except :
    o0O0 ( "Regex: -- No includeheaders --" )
    if 63 - 63: oO0o0ooO0 + ii11ii1ii . oO0OooOoO - o0Oo
   try :
    oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'x-req' ] = I1i1iii ( 'x-req' ) [ 0 ] . string
   except :
    o0O0 ( "Regex: -- No x-req --" )
   try :
    oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'x-forward' ] = I1i1iii ( 'x-forward' ) [ 0 ] . string
   except :
    o0O0 ( "Regex: -- No x-forward --" )
    if 52 - 52: ii11ii1ii % oOo0O0Ooo
   try :
    oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'agent' ] = I1i1iii ( 'agent' ) [ 0 ] . string
   except :
    o0O0 ( "Regex: -- No User Agent --" )
   try :
    oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'post' ] = I1i1iii ( 'post' ) [ 0 ] . string
   except :
    o0O0 ( "Regex: -- Not a post" )
   try :
    oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'rawpost' ] = I1i1iii ( 'rawpost' ) [ 0 ] . string
   except :
    o0O0 ( "Regex: -- Not a rawpost" )
   try :
    oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'htmlunescape' ] = I1i1iii ( 'htmlunescape' ) [ 0 ] . string
   except :
    o0O0 ( "Regex: -- Not a htmlunescape" )
    if 64 - 64: O0 % oO0o0ooO0 % O0 * I1ii11iIi11i . iI1Ii11111iIi + o0Oo
    if 75 - 75: oO0o0ooO0 . OoooooooOO % ii11ii1ii * oO0o0ooO0 % OoooooooOO
   try :
    oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'readcookieonly' ] = I1i1iii ( 'readcookieonly' ) [ 0 ] . string
   except :
    o0O0 ( "Regex: -- Not a readCookieOnly" )
    if 13 - 13: Ooo0 / i11iIiiIii % oO0OooOoO % oO0o0ooO0 . oO0ooO
   try :
    oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] = I1i1iii ( 'cookiejar' ) [ 0 ] . string
    if not oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] :
     oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] = ''
   except :
    o0O0 ( "Regex: -- Not a cookieJar" )
   try :
    oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'setcookie' ] = I1i1iii ( 'setcookie' ) [ 0 ] . string
   except :
    o0O0 ( "Regex: -- Not a setcookie" )
   try :
    oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'appendcookie' ] = I1i1iii ( 'appendcookie' ) [ 0 ] . string
   except :
    o0O0 ( "Regex: -- Not a appendcookie" )
    if 8 - 8: OOooOOo + oOo0O0Ooo - oO0OooOoO
   try :
    oooOOoOO [ I1i1iii ( 'name' ) [ 0 ] . string ] [ 'ignorecache' ] = I1i1iii ( 'ignorecache' ) [ 0 ] . string
   except :
    o0O0 ( "Regex: -- no ignorecache" )
    if 11 - 11: i1IIi % i11iIiiIii - i1IIi * OOooOOo
    if 39 - 39: O00OoOoo00
    if 86 - 86: oO0o0ooO0 * o0Oo + oO0o0ooO0 + oO0OooOoO
    if 8 - 8: O00OoOoo00 - ooO0Oooo00 / oooO
    if 96 - 96: OOooOOo
  oooOOoOO = urllib . quote ( repr ( oooOOoOO ) )
  return oooOOoOO
  if 29 - 29: oO0ooO / i1IIi . o0Oo - OOooOOo - OOooOOo - iiIIIII1i1iI
 except :
  oooOOoOO = None
  o0O0 ( 'regex Error: ' + iiiI1I11i1 . encode ( 'utf-8' , 'ignore' ) )
  if 20 - 20: i1IIi % I1ii11iIi11i . o0Oo / Ooo0 * i11iIiiIii * ii1II11I1ii1I
def OOo ( url ) :
 try :
  for I1i1iii in range ( 1 , 51 ) :
   ooo00Ooo = i1i11I1I1iii1 ( url )
   if "EXT-X-STREAM-INF" in ooo00Ooo : return url
   if not "EXTM3U" in ooo00Ooo : return
   xbmc . sleep ( 2000 )
  return
 except :
  return
  if 8 - 8: oooO + oO0OooOoO / ooO0Oooo00 / oO0o0ooO0
  if 74 - 74: O0 / i1IIi
def OoOIiiiii111i1ii ( regexs , url , cookieJar = None , forCookieJarOnly = False , recursiveCall = False , cachedPages = { } , rawPost = False , cookie_jar_file = None ) :
 if not recursiveCall :
  regexs = eval ( urllib . unquote ( regexs ) )
  if 25 - 25: ii1II11I1ii1I - oooO / i11iIiiIii
  if 41 - 41: i1IIi % ooO0Oooo00 + iIii1I11I1II1
 Ii1IIIIi1ii1I = re . compile ( '\$doregex\[([^\]]*)\]' ) . findall ( url )
 if 13 - 13: o0Oo % OOooOOo . oO0ooO / oOo0O0Ooo % ii1II11I1ii1I . OoooooooOO
 i1iIi = True
 if 30 - 30: O0 - iIii1I11I1II1 / OoooooooOO
 if 89 - 89: ooO0Oooo00 - oooO % oOo0O0Ooo % ii11ii1ii
 if 49 - 49: oOo0O0Ooo - o0Oo / Ooo0 / O0 % ii11ii1ii * iiIIIII1i1iI
 if 100 - 100: ii1II11I1ii1I . ooO0Oooo00 / O0 * i1IIi * iiIIIII1i1iI * oOo0O0Ooo
 for OO00 in Ii1IIIIi1ii1I :
  if OO00 in regexs :
   if 92 - 92: oO0o0ooO0
   Oo00OoOo = regexs [ OO00 ]
   if 24 - 24: i11iIiiIii - O00OoOoo00
   i11iiI1111 = False
   if 97 - 97: oOo0O0Ooo * o0Oo . iIii1I11I1II1
   if 16 - 16: oooO % OoooooooOO - ii1II11I1ii1I * iiIIIII1i1iI * oO0ooO / OoooooooOO
   if 'cookiejar' in Oo00OoOo :
    if 31 - 31: oO0o0ooO0 . O00OoOoo00 * oooO + i11iIiiIii * iI1Ii11111iIi
    i11iiI1111 = Oo00OoOo [ 'cookiejar' ]
    if '$doregex' in i11iiI1111 :
     cookieJar = OoOIiiiii111i1ii ( regexs , Oo00OoOo [ 'cookiejar' ] , cookieJar , True , True , cachedPages )
     i11iiI1111 = True
    else :
     i11iiI1111 = True
     if 93 - 93: oO0ooO / iIii1I11I1II1 * i1IIi % OoooooooOO * O0 * oO0o0ooO0
   if i11iiI1111 :
    if cookieJar == None :
     if 64 - 64: oO0OooOoO + O0 / iIii1I11I1II1 / oOo0O0Ooo . oooO % Ooo0
     cookie_jar_file = None
     if 'open[' in Oo00OoOo [ 'cookiejar' ] :
      cookie_jar_file = Oo00OoOo [ 'cookiejar' ] . split ( 'open[' ) [ 1 ] . split ( ']' ) [ 0 ]
      if 50 - 50: iIii1I11I1II1 - Ooo0 + ii1II11I1ii1I
     cookieJar = o0iiiI1I1iIIIi1 ( cookie_jar_file )
     if cookie_jar_file :
      Iii ( cookieJar , cookie_jar_file )
      if 19 - 19: oO0o0ooO0 % oO0OooOoO / i11iIiiIii / ooO0Oooo00 - OoooooooOO
      if 37 - 37: ii1II11I1ii1I / OoooooooOO - i11iIiiIii
      if 18 - 18: ooO0Oooo00 . o0Oo
    elif 'save[' in Oo00OoOo [ 'cookiejar' ] :
     cookie_jar_file = Oo00OoOo [ 'cookiejar' ] . split ( 'save[' ) [ 1 ] . split ( ']' ) [ 0 ]
     iiIi1IIiI = os . path . join ( o00 , cookie_jar_file )
     print 'complete_path' , iiIi1IIiI
     Iii ( cookieJar , cookie_jar_file )
     if 23 - 23: iiIIIII1i1iI . ii1II11I1ii1I
     if 9 - 9: oooO - oO0ooO - ooO0Oooo00
   if Oo00OoOo [ 'page' ] and '$doregex' in Oo00OoOo [ 'page' ] :
    Oo00OoOo [ 'page' ] = OoOIiiiii111i1ii ( regexs , Oo00OoOo [ 'page' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 82 - 82: Ooo0 - Ooo0 + OOooOOo
   if 'setcookie' in Oo00OoOo and Oo00OoOo [ 'setcookie' ] and '$doregex' in Oo00OoOo [ 'setcookie' ] :
    Oo00OoOo [ 'setcookie' ] = OoOIiiiii111i1ii ( regexs , Oo00OoOo [ 'setcookie' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
   if 'appendcookie' in Oo00OoOo and Oo00OoOo [ 'appendcookie' ] and '$doregex' in Oo00OoOo [ 'appendcookie' ] :
    Oo00OoOo [ 'appendcookie' ] = OoOIiiiii111i1ii ( regexs , Oo00OoOo [ 'appendcookie' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 8 - 8: ii11ii1ii % ooO0Oooo00 * iI1Ii11111iIi % iiIIIII1i1iI . oooO / oooO
    if 81 - 81: I1ii11iIi11i
   if 'post' in Oo00OoOo and '$doregex' in Oo00OoOo [ 'post' ] :
    Oo00OoOo [ 'post' ] = OoOIiiiii111i1ii ( regexs , Oo00OoOo [ 'post' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    print 'post is now' , Oo00OoOo [ 'post' ]
    if 99 - 99: iI1Ii11111iIi * oO0OooOoO * O00OoOoo00
   if 'rawpost' in Oo00OoOo and '$doregex' in Oo00OoOo [ 'rawpost' ] :
    Oo00OoOo [ 'rawpost' ] = OoOIiiiii111i1ii ( regexs , Oo00OoOo [ 'rawpost' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages , rawPost = True )
    if 92 - 92: oOo0O0Ooo
    if 40 - 40: OOooOOo / Ooo0
   if 'rawpost' in Oo00OoOo and '$epoctime$' in Oo00OoOo [ 'rawpost' ] :
    Oo00OoOo [ 'rawpost' ] = Oo00OoOo [ 'rawpost' ] . replace ( '$epoctime$' , OOOoO000 ( ) )
    if 57 - 57: oO0OooOoO
   if 'rawpost' in Oo00OoOo and '$epoctime2$' in Oo00OoOo [ 'rawpost' ] :
    Oo00OoOo [ 'rawpost' ] = Oo00OoOo [ 'rawpost' ] . replace ( '$epoctime2$' , oOOOoo ( ) )
    if 15 - 15: i11iIiiIii % o0Oo * oO0o0ooO0 / O00OoOoo00
    if 90 - 90: ooO0Oooo00
   i1i1i1I = ''
   if Oo00OoOo [ 'page' ] and Oo00OoOo [ 'page' ] in cachedPages and not 'ignorecache' in Oo00OoOo and forCookieJarOnly == False :
    i1i1i1I = cachedPages [ Oo00OoOo [ 'page' ] ]
   else :
    if Oo00OoOo [ 'page' ] and not Oo00OoOo [ 'page' ] == '' and Oo00OoOo [ 'page' ] . startswith ( 'http' ) :
     if '$epoctime$' in Oo00OoOo [ 'page' ] :
      Oo00OoOo [ 'page' ] = Oo00OoOo [ 'page' ] . replace ( '$epoctime$' , OOOoO000 ( ) )
     if '$epoctime2$' in Oo00OoOo [ 'page' ] :
      Oo00OoOo [ 'page' ] = Oo00OoOo [ 'page' ] . replace ( '$epoctime2$' , oOOOoo ( ) )
      if 83 - 83: iI1Ii11111iIi + OoooooooOO
      if 22 - 22: iiIIIII1i1iI % ooO0Oooo00 * OoooooooOO - ii11ii1ii / iIii1I11I1II1
     Oo = Oo00OoOo [ 'page' ] . split ( '|' )
     OO00IIiiIIi1 = Oo [ 0 ]
     o00ooO00O = None
     if len ( Oo ) > 1 :
      o00ooO00O = Oo [ 1 ]
     i1I111I = urllib2 . Request ( OO00IIiiIIi1 )
     i1I111I . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20100101 Firefox/14.0.1' )
     if 'refer' in Oo00OoOo :
      i1I111I . add_header ( 'Referer' , Oo00OoOo [ 'refer' ] )
     if 'agent' in Oo00OoOo :
      i1I111I . add_header ( 'User-agent' , Oo00OoOo [ 'agent' ] )
     if 'x-req' in Oo00OoOo :
      i1I111I . add_header ( 'X-Requested-With' , Oo00OoOo [ 'x-req' ] )
     if 'x-forward' in Oo00OoOo :
      i1I111I . add_header ( 'X-Forwarded-For' , Oo00OoOo [ 'x-forward' ] )
     if 'setcookie' in Oo00OoOo :
      print 'adding cookie' , Oo00OoOo [ 'setcookie' ]
      i1I111I . add_header ( 'Cookie' , Oo00OoOo [ 'setcookie' ] )
     if 'appendcookie' in Oo00OoOo :
      print 'appending cookie to cookiejar' , Oo00OoOo [ 'appendcookie' ]
      oo00o0 = Oo00OoOo [ 'appendcookie' ]
      oo00o0 = oo00o0 . split ( ';' )
      for OooOOOOoO00OoOO in oo00o0 :
       oOooo0O0o , Oo000O00O0oOOo = OooOOOOoO00OoOO . split ( '=' )
       O0oO , oOooo0O0o = oOooo0O0o . split ( ':' )
       OO000oooo0 = cookielib . Cookie ( version = 0 , name = oOooo0O0o , value = Oo000O00O0oOOo , port = None , port_specified = False , domain = O0oO , domain_specified = False , domain_initial_dot = False , path = '/' , path_specified = True , secure = False , expires = None , discard = True , comment = None , comment_url = None , rest = { 'HttpOnly' : None } , rfc2109 = False )
       cookieJar . set_cookie ( OO000oooo0 )
       if 77 - 77: o0Oo % O0
       if 36 - 36: iiIIIII1i1iI / oO0OooOoO / Ooo0 / Ooo0 + oO0ooO
       if 95 - 95: Ooo0
       if 51 - 51: oO0OooOoO + Ooo0 . i1IIi . oO0ooO + OOooOOo * o0Oo
     if 'origin' in Oo00OoOo :
      i1I111I . add_header ( 'Origin' , Oo00OoOo [ 'origin' ] )
     if o00ooO00O :
      o00ooO00O = o00ooO00O . split ( '&' )
      for OooOOOOoO00OoOO in o00ooO00O :
       oOooo0O0o , Oo000O00O0oOOo = OooOOOOoO00OoOO . split ( '=' )
       i1I111I . add_header ( oOooo0O0o , Oo000O00O0oOOo )
       if 72 - 72: iI1Ii11111iIi + iI1Ii11111iIi / oO0OooOoO . OoooooooOO % iiIIIII1i1iI
       if 49 - 49: iI1Ii11111iIi . I1ii11iIi11i - oOo0O0Ooo * OoooooooOO . oOo0O0Ooo
     if not cookieJar == None :
      if 2 - 2: OoooooooOO % ii1II11I1ii1I
      oOoOOo0oo0 = urllib2 . HTTPCookieProcessor ( cookieJar )
      o0O0Oo00Oo0o = urllib2 . build_opener ( oOoOOo0oo0 , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
      o0O0Oo00Oo0o = urllib2 . install_opener ( o0O0Oo00Oo0o )
      if 'noredirect' in Oo00OoOo :
       OOOo = urllib2 . build_opener ( I1IiI )
       o0O0Oo00Oo0o = urllib2 . install_opener ( OOOo )
       if 88 - 88: i11iIiiIii - oooO
     if 'connection' in Oo00OoOo :
      print '..........................connection//////.' , Oo00OoOo [ 'connection' ]
      from keepalive import HTTPHandler
      O0iIi1IiII = HTTPHandler ( )
      o0O0Oo00Oo0o = urllib2 . build_opener ( O0iIi1IiII )
      urllib2 . install_opener ( o0O0Oo00Oo0o )
      if 27 - 27: ooO0Oooo00 . oO0o0ooO0 . iIii1I11I1II1 . iIii1I11I1II1
      if 20 - 20: ii11ii1ii / i1IIi
     oOIi111 = None
     if 67 - 67: O0
     if 'post' in Oo00OoOo :
      Ooo = Oo00OoOo [ 'post' ]
      if '$LiveStreamRecaptcha' in Ooo :
       ( ooooo0o , oo0OoOOO0o0 ) = iiI11I1i1i1iI ( Oo00OoOo [ 'page' ] )
       if ooooo0o :
        Ooo += 'recaptcha_challenge_field:' + ooooo0o + ',recaptcha_response_field:' + oo0OoOOO0o0
      OoOOo000o0 = Ooo . split ( ',' ) ;
      oOIi111 = { }
      for ii in OoOOo000o0 :
       oOooo0O0o = ii . split ( ':' ) [ 0 ] ;
       Oo000O00O0oOOo = ii . split ( ':' ) [ 1 ] ;
       oOIi111 [ oOooo0O0o ] = Oo000O00O0oOOo
      oOIi111 = urllib . urlencode ( oOIi111 )
      if 32 - 32: iiIIIII1i1iI % oO0ooO - ii1II11I1ii1I * ii11ii1ii + oO0o0ooO0
     if 'rawpost' in Oo00OoOo :
      oOIi111 = Oo00OoOo [ 'rawpost' ]
      if '$LiveStreamRecaptcha' in oOIi111 :
       ( ooooo0o , oo0OoOOO0o0 ) = iiI11I1i1i1iI ( Oo00OoOo [ 'page' ] )
       if ooooo0o :
        oOIi111 += '&recaptcha_challenge_field=' + ooooo0o + '&recaptcha_response_field=' + oo0OoOOO0o0
        if 10 - 10: o0Oo / oOo0O0Ooo % oO0ooO * oooO
        if 6 - 6: ooO0Oooo00 . Ooo0 * OOooOOo . i1IIi
        if 98 - 98: i1IIi
        if 65 - 65: OOooOOo / I1ii11iIi11i % Ooo0
     if oOIi111 :
      i11I1IIiiIi = urllib2 . urlopen ( i1I111I , oOIi111 )
     else :
      i11I1IIiiIi = urllib2 . urlopen ( i1I111I )
      if 45 - 45: OOooOOo
     i1i1i1I = i11I1IIiiIi . read ( )
     i1i1i1I = oOooOO ( i1i1i1I )
     if 31 - 31: ii1II11I1ii1I / oOo0O0Ooo * i1IIi . OOooOOo
     if 'includeheaders' in Oo00OoOo :
      i1i1i1I += str ( i11I1IIiiIi . headers . get ( 'Set-Cookie' ) )
      if 57 - 57: ii1II11I1ii1I + iIii1I11I1II1 % i1IIi % o0Oo
     i11I1IIiiIi . close ( )
     cachedPages [ Oo00OoOo [ 'page' ] ] = i1i1i1I
     if 83 - 83: ii11ii1ii / i11iIiiIii % iIii1I11I1II1 . oO0o0ooO0 % iI1Ii11111iIi . OoooooooOO
     if 94 - 94: iiIIIII1i1iI + iIii1I11I1II1 % I1ii11iIi11i
     if 93 - 93: iiIIIII1i1iI - ii1II11I1ii1I + iIii1I11I1II1 * ii11ii1ii + O00OoOoo00 . ooO0Oooo00
     if forCookieJarOnly :
      return cookieJar
    elif Oo00OoOo [ 'page' ] and not Oo00OoOo [ 'page' ] . startswith ( 'http' ) :
     if Oo00OoOo [ 'page' ] . startswith ( '$pyFunction:' ) :
      IiI1iII1II111 = IIiI11i1111Ii ( Oo00OoOo [ 'page' ] . split ( '$pyFunction:' ) [ 1 ] , '' , cookieJar )
      if forCookieJarOnly :
       return cookieJar
      i1i1i1I = IiI1iII1II111
     else :
      i1i1i1I = Oo00OoOo [ 'page' ]
   if '$pyFunction:playmedia(' in Oo00OoOo [ 'expre' ] or 'ActivateWindow' in Oo00OoOo [ 'expre' ] or any ( x in url for x in IIiIiII11i ) :
    i1iIi = False
   if '$doregex' in Oo00OoOo [ 'expre' ] :
    Oo00OoOo [ 'expre' ] = OoOIiiiii111i1ii ( regexs , Oo00OoOo [ 'expre' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 63 - 63: ii1II11I1ii1I + oooO
    if 66 - 66: ii1II11I1ii1I - iIii1I11I1II1 / OOooOOo + ii1II11I1ii1I - oO0o0ooO0 + ooO0Oooo00
   if not Oo00OoOo [ 'expre' ] == '' :
    print 'doing it ' , Oo00OoOo [ 'expre' ]
    if '$LiveStreamCaptcha' in Oo00OoOo [ 'expre' ] :
     IiI1iII1II111 = IIii1i1iii1 ( Oo00OoOo , i1i1i1I , cookieJar )
     if 70 - 70: i11iIiiIii % ooO0Oooo00
     url = url . replace ( "$doregex[" + OO00 + "]" , IiI1iII1II111 )
    elif Oo00OoOo [ 'expre' ] . startswith ( '$pyFunction:' ) :
     if 11 - 11: Ooo0 % oO0ooO % iiIIIII1i1iI / oO0OooOoO % O00OoOoo00 - oOo0O0Ooo
     IiI1iII1II111 = IIiI11i1111Ii ( Oo00OoOo [ 'expre' ] . split ( '$pyFunction:' ) [ 1 ] , i1i1i1I , cookieJar )
     if 'ActivateWindow' in Oo00OoOo [ 'expre' ] : return
     print 'still hre'
     print 'url k val' , url , OO00 , IiI1iII1II111
     if 96 - 96: oO0ooO / oO0OooOoO . iiIIIII1i1iI - ooO0Oooo00 * oO0o0ooO0 * iI1Ii11111iIi
     url = url . replace ( "$doregex[" + OO00 + "]" , IiI1iII1II111 )
    else :
     if not i1i1i1I == '' :
      O00oo0ooO = re . compile ( Oo00OoOo [ 'expre' ] ) . search ( i1i1i1I )
      IiI1iII1II111 = ''
      try :
       IiI1iII1II111 = O00oo0ooO . group ( 1 ) . strip ( )
      except : traceback . print_exc ( )
     else :
      IiI1iII1II111 = Oo00OoOo [ 'expre' ]
     if rawPost :
      print 'rawpost'
      IiI1iII1II111 = urllib . quote_plus ( IiI1iII1II111 )
     if 'htmlunescape' in Oo00OoOo :
      if 38 - 38: iIii1I11I1II1 - oO0OooOoO - o0Oo
      import HTMLParser
      IiI1iII1II111 = HTMLParser . HTMLParser ( ) . unescape ( IiI1iII1II111 )
     url = url . replace ( "$doregex[" + OO00 + "]" , IiI1iII1II111 )
     if 71 - 71: OoooooooOO
   else :
    url = url . replace ( "$doregex[" + OO00 + "]" , '' )
 if '$epoctime$' in url :
  url = url . replace ( '$epoctime$' , OOOoO000 ( ) )
 if '$epoctime2$' in url :
  url = url . replace ( '$epoctime2$' , oOOOoo ( ) )
  if 33 - 33: O00OoOoo00
 if '$GUID$' in url :
  import uuid
  url = url . replace ( '$GUID$' , str ( uuid . uuid1 ( ) ) . upper ( ) )
 if '$get_cookies$' in url :
  url = url . replace ( '$get_cookies$' , OOO0ooo ( cookieJar ) )
  if 7 - 7: ii11ii1ii + i1IIi . o0Oo / oOo0O0Ooo
 if recursiveCall : return url
 print 'final url' , url
 if url == "" :
  return
 else :
  return url , i1iIi
  if 22 - 22: oooO - oooO % ii1II11I1ii1I . O00OoOoo00 + iI1Ii11111iIi
  if 63 - 63: o0Oo % O00OoOoo00 * ii11ii1ii + O00OoOoo00 / oOo0O0Ooo % ooO0Oooo00
  if 45 - 45: Ooo0
def Ii1Iii111IiI1 ( t ) :
 import hashlib
 OooOOOOoO00OoOO = hashlib . md5 ( )
 OooOOOOoO00OoOO . update ( t )
 return OooOOOOoO00OoOO . hexdigest ( )
 if 98 - 98: O00OoOoo00 - OoooooooOO % o0Oo + O0 . iiIIIII1i1iI
def OoOO ( encrypted ) :
 iIII1I1i1i = ""
 for IiI1iII1II111 in encrypted . split ( ':' ) :
  iIII1I1i1i += chr ( int ( IiI1iII1II111 . replace ( "0m0" , "" ) ) / 84 / 5 )
 return iIII1I1i1i
 if 79 - 79: iiIIIII1i1iI . I1ii11iIi11i
def IIiI1I1 ( media_url ) :
 try :
  import CustomPlayer
  I11I1IIiiII1 = CustomPlayer . MyXBMCPlayer ( )
  IIIIIii1ii11 = xbmcgui . ListItem ( label = str ( iiiI1I11i1 ) , iconImage = "DefaultVideo.png" , thumbnailImage = xbmc . getInfoImage ( "ListItem.Thumb" ) , path = media_url )
  I11I1IIiiII1 . play ( media_url , IIIIIii1ii11 )
  xbmc . sleep ( 1000 )
  while I11I1IIiiII1 . is_active :
   xbmc . sleep ( 200 )
 except :
  traceback . print_exc ( )
 return ''
 if 86 - 86: OOooOOo * oO0OooOoO - O0 . OOooOOo % iIii1I11I1II1 / ii1II11I1ii1I
 if 11 - 11: o0Oo * iI1Ii11111iIi + oO0ooO / oO0ooO
def iiii1I1 ( page_value , referer = None ) :
 if referer :
  referer = [ ( 'Referer' , referer ) ]
 if page_value . startswith ( "http" ) :
  IIIiIiI11iIi = page_value
  page_value = i1i11I1I1iii1 ( page_value , headers = referer )
  if 89 - 89: O0
 IIIII1I1Ii11iI = "(eval\(function\(p,a,c,k,e,(?:r|d).*)"
 if 52 - 52: ii1II11I1ii1I - ooO0Oooo00 * iI1Ii11111iIi
 Ii1I11I = re . compile ( IIIII1I1Ii11iI ) . findall ( page_value )
 o0O0oo0OO0O = ""
 if Ii1I11I and len ( Ii1I11I ) > 0 :
  for Oo000O00O0oOOo in Ii1I11I :
   iiIii1I = i1I11iIiII ( Oo000O00O0oOOo )
   OO0OO0OO = OoOO000 ( iiIii1I , '\'(.*?)\'' )
   if 'unescape' in iiIii1I :
    iiIii1I = urllib . unquote ( OO0OO0OO )
   o0O0oo0OO0O += iiIii1I + '\n'
  print 'final value is ' , o0O0oo0OO0O
  if 61 - 61: OoooooooOO . iI1Ii11111iIi . OoooooooOO / oOo0O0Ooo
  IIIiIiI11iIi = OoOO000 ( o0O0oo0OO0O , 'src="(.*?)"' )
  if 72 - 72: i1IIi
  page_value = i1i11I1I1iii1 ( IIIiIiI11iIi , headers = referer )
  if 82 - 82: OOooOOo + OoooooooOO / i11iIiiIii * oO0ooO . OoooooooOO
  if 63 - 63: oO0ooO
  if 6 - 6: oooO / oO0ooO
 oOooO00o0O = OoOO000 ( page_value , 'streamer\'.*?\'(.*?)\'\)' )
 OOo0 = OoOO000 ( page_value , 'file\',\s\'(.*?)\'' )
 if 35 - 35: i1IIi - iIii1I11I1II1 + i1IIi
 if 86 - 86: iIii1I11I1II1 + OOooOOo . i11iIiiIii - iiIIIII1i1iI
 return oOooO00o0O + ' playpath=' + OOo0 + ' pageUrl=' + IIIiIiI11iIi
 if 51 - 51: OOooOOo
def I11IIIiIi11 ( page_value , referer = None ) :
 if referer :
  referer = [ ( 'Referer' , referer ) ]
 if page_value . startswith ( "http" ) :
  page_value = i1i11I1I1iii1 ( page_value , headers = referer )
 IIIII1I1Ii11iI = "var a = (.*?);\s*var b = (.*?);\s*var c = (.*?);\s*var d = (.*?);\s*var f = (.*?);\s*var v_part = '(.*?)';"
 Ii1I11I = re . compile ( IIIII1I1Ii11iI ) . findall ( page_value ) [ 0 ]
 if 39 - 39: iiIIIII1i1iI % O0 % OOooOOo . i1IIi
 iIiIi11 , O0OOO0OOoO0O , OoO , oOo00OooO0oO , I1IIi , Oo000O00O0oOOo = ( Ii1I11I )
 I1IIi = int ( I1IIi )
 iIiIi11 = int ( iIiIi11 ) / I1IIi
 O0OOO0OOoO0O = int ( O0OOO0OOoO0O ) / I1IIi
 OoO = int ( OoO ) / I1IIi
 oOo00OooO0oO = int ( oOo00OooO0oO ) / I1IIi
 if 69 - 69: iiIIIII1i1iI + oOo0O0Ooo + oO0OooOoO - o0Oo / oO0o0ooO0
 O0O0ooOOO = 'rtmp://' + str ( iIiIi11 ) + '.' + str ( O0OOO0OOoO0O ) + '.' + str ( OoO ) + '.' + str ( oOo00OooO0oO ) + Oo000O00O0oOOo ;
 return O0O0ooOOO
 if 70 - 70: oooO . O0 . O00OoOoo00 . O0 + i1IIi
def i1II1I ( url , useragent = None ) :
 str = '#EXTM3U'
 str += '\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=361816'
 str += '\n' + url + '&bytes=0-200000'
 OOO0O = os . path . join ( o00 , 'testfile.m3u' )
 str += '\n'
 OOoO0ooOO ( OOO0O , str )
 if 24 - 24: i1IIi . i11iIiiIii
 return OOO0O
 if 16 - 16: oOo0O0Ooo % oO0ooO + oO0o0ooO0 - O0 . ooO0Oooo00 / O00OoOoo00
def OOoO0ooOO ( file_name , page_data , append = False ) :
 if append :
  I1IIi = open ( file_name , 'a' )
  I1IIi . write ( page_data )
  I1IIi . close ( )
 else :
  I1IIi = open ( file_name , 'wb' )
  I1IIi . write ( page_data )
  I1IIi . close ( )
  return ''
  if 35 - 35: iI1Ii11111iIi / O00OoOoo00 / oO0OooOoO - iIii1I11I1II1 + oO0OooOoO . O00OoOoo00
def O0O00O000OOO ( file_name ) :
 I1IIi = open ( file_name , 'rb' )
 oOo00OooO0oO = I1IIi . read ( )
 I1IIi . close ( )
 return oOo00OooO0oO
 if 3 - 3: O0
def Ooo0Oo0oo0 ( page_data ) :
 import re , base64 , urllib ;
 oOO0o000Oo00o = page_data
 while 'geh(' in oOO0o000Oo00o :
  if oOO0o000Oo00o . startswith ( 'lol(' ) : oOO0o000Oo00o = oOO0o000Oo00o [ 5 : - 1 ]
  if 21 - 21: OoooooooOO - iIii1I11I1II1
  oOO0o000Oo00o = re . compile ( '"(.*?)"' ) . findall ( oOO0o000Oo00o ) [ 0 ] ;
  oOO0o000Oo00o = base64 . b64decode ( oOO0o000Oo00o ) ;
  oOO0o000Oo00o = urllib . unquote ( oOO0o000Oo00o ) ;
 print oOO0o000Oo00o
 return oOO0o000Oo00o
 if 93 - 93: iI1Ii11111iIi - ii11ii1ii % OOooOOo . OOooOOo - oooO
def O00ooOo ( page_data ) :
 print 'get_dag_url2' , page_data
 oOO0o00O = i1i11I1I1iii1 ( page_data ) ;
 oOoO = '(http.*)'
 import uuid
 IIIIiI1iiiIiii = str ( uuid . uuid1 ( ) ) . upper ( )
 ii1i1i = re . compile ( oOoO ) . findall ( oOO0o00O )
 oo = [ ( 'X-Playback-Session-Id' , IIIIiI1iiiIiii ) ]
 for II11iIII1i1I in ii1i1i :
  try :
   oOO0oo = i1i11I1I1iii1 ( II11iIII1i1I , headers = oo ) ;
   if 13 - 13: OoooooooOO * iI1Ii11111iIi - iiIIIII1i1iI / ii1II11I1ii1I + oO0o0ooO0 + Ooo0
  except : pass
  if 39 - 39: iIii1I11I1II1 - OoooooooOO
 return page_data + '|&X-Playback-Session-Id=' + IIIIiI1iiiIiii
 if 81 - 81: oO0ooO - O0 * OoooooooOO
 if 23 - 23: oO0OooOoO / iI1Ii11111iIi
def iII1Iii1I11i ( page_data ) :
 print 'get_dag_url' , page_data
 if page_data . startswith ( 'http://dag.total-stream.net' ) :
  oo = [ ( 'User-Agent' , 'Verismo-BlackUI_(2.4.7.5.8.0.34)' ) ]
  page_data = i1i11I1I1iii1 ( page_data , headers = oo ) ;
  if 17 - 17: O0
 if '127.0.0.1' in page_data :
  return OOooO0o ( page_data )
 elif OoOO000 ( page_data , 'wmsAuthSign%3D([^%&]+)' ) != '' :
  ii1iI1iI1 = OoOO000 ( page_data , '&ver_t=([^&]+)&' ) + '?wmsAuthSign=' + OoOO000 ( page_data , 'wmsAuthSign%3D([^%&]+)' ) + '==/mp4:' + OoOO000 ( page_data , '\\?y=([^&]+)&' )
 else :
  ii1iI1iI1 = OoOO000 ( page_data , 'href="([^"]+)"[^"]+$' )
  if len ( ii1iI1iI1 ) == 0 :
   ii1iI1iI1 = page_data
 ii1iI1iI1 = ii1iI1iI1 . replace ( ' ' , '%20' )
 return ii1iI1iI1
 if 55 - 55: oooO + ii1II11I1ii1I
def OoOO000 ( data , re_patten ) :
 i11111IIIII = ''
 Oo00OoOo = re . search ( re_patten , data )
 if Oo00OoOo != None :
  i11111IIIII = Oo00OoOo . group ( 1 )
 else :
  i11111IIIII = ''
 return i11111IIIII
 if 18 - 18: iI1Ii11111iIi - ii11ii1ii - o0Oo - o0Oo
def OOooO0o ( page_data ) :
 ii1iI1iI1 = ''
 if '127.0.0.1' in page_data :
  ii1iI1iI1 = OoOO000 ( page_data , '&ver_t=([^&]+)&' ) + ' live=true timeout=15 playpath=' + OoOO000 ( page_data , '\\?y=([a-zA-Z0-9-_\\.@]+)' )
  if 54 - 54: oOo0O0Ooo + o0Oo / ooO0Oooo00 . o0Oo * OOooOOo
 if OoOO000 ( page_data , 'token=([^&]+)&' ) != '' :
  ii1iI1iI1 = ii1iI1iI1 + '?token=' + OoOO000 ( page_data , 'token=([^&]+)&' )
 elif OoOO000 ( page_data , 'wmsAuthSign%3D([^%&]+)' ) != '' :
  ii1iI1iI1 = OoOO000 ( page_data , '&ver_t=([^&]+)&' ) + '?wmsAuthSign=' + OoOO000 ( page_data , 'wmsAuthSign%3D([^%&]+)' ) + '==/mp4:' + OoOO000 ( page_data , '\\?y=([^&]+)&' )
 else :
  ii1iI1iI1 = OoOO000 ( page_data , 'HREF="([^"]+)"' )
  if 1 - 1: OOooOOo * I1ii11iIi11i . i1IIi / oOo0O0Ooo . oO0ooO + oOo0O0Ooo
 if 'dag1.asx' in ii1iI1iI1 :
  return iII1Iii1I11i ( ii1iI1iI1 )
  if 17 - 17: oOo0O0Ooo + I1ii11iIi11i / iiIIIII1i1iI / ooO0Oooo00 * ii1II11I1ii1I
 if 'devinlivefs.fplive.net' not in ii1iI1iI1 :
  ii1iI1iI1 = ii1iI1iI1 . replace ( 'devinlive' , 'flive' )
 if 'permlivefs.fplive.net' not in ii1iI1iI1 :
  ii1iI1iI1 = ii1iI1iI1 . replace ( 'permlive' , 'flive' )
 return ii1iI1iI1
 if 29 - 29: I1ii11iIi11i % OoooooooOO * iI1Ii11111iIi / oO0OooOoO - iI1Ii11111iIi
 if 19 - 19: i11iIiiIii
def oo0 ( str_eval ) :
 oOO = ""
 try :
  II1i11i1iIi11 = "w,i,s,e=(" + str_eval + ')'
  exec ( II1i11i1iIi11 )
  oOO = oo0O0oO0O0O ( w , i , s , e )
 except : traceback . print_exc ( file = sys . stdout )
 if 69 - 69: iI1Ii11111iIi / i11iIiiIii
 return oOO
 if 94 - 94: iI1Ii11111iIi / Ooo0 / i1IIi * iIii1I11I1II1
def oo0O0oO0O0O ( w , i , s , e ) :
 ooo0 = 0 ;
 iIIIiiiI11I = 0 ;
 I1ii1111Ii = 0 ;
 o0O = [ ] ;
 iiiI1i11Ii = [ ] ;
 while True :
  if ( ooo0 < 5 ) :
   iiiI1i11Ii . append ( w [ ooo0 ] )
  elif ( ooo0 < len ( w ) ) :
   o0O . append ( w [ ooo0 ] ) ;
  ooo0 += 1 ;
  if ( iIIIiiiI11I < 5 ) :
   iiiI1i11Ii . append ( i [ iIIIiiiI11I ] )
  elif ( iIIIiiiI11I < len ( i ) ) :
   o0O . append ( i [ iIIIiiiI11I ] )
  iIIIiiiI11I += 1 ;
  if ( I1ii1111Ii < 5 ) :
   iiiI1i11Ii . append ( s [ I1ii1111Ii ] )
  elif ( I1ii1111Ii < len ( s ) ) :
   o0O . append ( s [ I1ii1111Ii ] ) ;
  I1ii1111Ii += 1 ;
  if ( len ( w ) + len ( i ) + len ( s ) + len ( e ) == len ( o0O ) + len ( iiiI1i11Ii ) + len ( e ) ) :
   break ;
   if 16 - 16: oOo0O0Ooo / i11iIiiIii
 oo00IIIIIIIiI = '' . join ( o0O )
 I1IIiI = '' . join ( iiiI1i11Ii )
 iIIIiiiI11I = 0 ;
 O0oOOo0o = [ ] ;
 for ooo0 in range ( 0 , len ( o0O ) , 2 ) :
  if 50 - 50: ooO0Oooo00 . oO0ooO . I1ii11iIi11i * oO0o0ooO0 + oO0OooOoO % i11iIiiIii
  i1i1IiIiIi1Ii = - 1 ;
  if ( ord ( I1IIiI [ iIIIiiiI11I ] ) % 2 ) :
   i1i1IiIiIi1Ii = 1 ;
   if 64 - 64: ii1II11I1ii1I + OoooooooOO * OoooooooOO
  O0oOOo0o . append ( chr ( int ( oo00IIIIIIIiI [ ooo0 : ooo0 + 2 ] , 36 ) - i1i1IiIiIi1Ii ) ) ;
  iIIIiiiI11I += 1 ;
  if ( iIIIiiiI11I >= len ( iiiI1i11Ii ) ) :
   iIIIiiiI11I = 0 ;
 O0O0ooOOO = '' . join ( O0oOOo0o )
 if 'eval(function(w,i,s,e)' in O0O0ooOOO :
  print 'STILL GOing'
  O0O0ooOOO = re . compile ( 'eval\(function\(w,i,s,e\).*}\((.*?)\)' ) . findall ( O0O0ooOOO ) [ 0 ]
  return oo0 ( O0O0ooOOO )
 else :
  print 'FINISHED'
  return O0O0ooOOO
  if 41 - 41: oooO . oOo0O0Ooo + o0Oo
def i1I11iIiII ( page_value , regex_for_text = '' , iterations = 1 , total_iteration = 1 ) :
 try :
  o0O0OO = None
  if page_value . startswith ( "http" ) :
   page_value = i1i11I1I1iii1 ( page_value )
  print 'page_value' , page_value
  if regex_for_text and len ( regex_for_text ) > 0 :
   page_value = re . compile ( regex_for_text ) . findall ( page_value ) [ 0 ]
   if 22 - 22: oO0OooOoO * I1ii11iIi11i * oO0o0ooO0 + oO0ooO * ii11ii1ii
  page_value = oo0o0 ( page_value , iterations , total_iteration )
 except : traceback . print_exc ( file = sys . stdout )
 print 'unpacked' , page_value
 if 'sav1live.tv' in page_value :
  page_value = page_value . replace ( 'sav1live.tv' , 'sawlive.tv' )
  print 'sav1 unpacked' , page_value
 return page_value
 if 69 - 69: oO0ooO - O00OoOoo00
def oo0o0 ( sJavascript , iteration = 1 , totaliterations = 2 ) :
 print 'iteration' , iteration
 if sJavascript . startswith ( 'var _0xcb8a=' ) :
  iiIIi1 = sJavascript . split ( 'var _0xcb8a=' )
  II1i11i1iIi11 = "myarray=" + iiIIi1 [ 1 ] . split ( "eval(" ) [ 0 ]
  exec ( II1i11i1iIi11 )
  i111i11I1Ii1I = 62
  iI1I11iIIi1 = int ( iiIIi1 [ 1 ] . split ( ",62," ) [ 1 ] . split ( ',' ) [ 0 ] )
  iI = myarray [ 0 ]
  Ii1IIiiIiiIi = myarray [ 3 ]
  with open ( 'temp file' + str ( iteration ) + '.js' , "wb" ) as i1iiIIIi :
   i1iiIIIi . write ( str ( Ii1IIiiIiiIi ) )
   if 62 - 62: O0 / o0Oo % O0 * I1ii11iIi11i % o0Oo
 else :
  if 33 - 33: o0Oo . iI1Ii11111iIi * I1ii11iIi11i * iIii1I11I1II1
  iiIIi1 = sJavascript . split ( "rn p}('" )
  print iiIIi1
  if 5 - 5: oOo0O0Ooo / Ooo0 % O0 . O00OoOoo00 * Ooo0
  iI , i111i11I1Ii1I , iI1I11iIIi1 , Ii1IIiiIiiIi = ( '' , '0' , '0' , '' )
  if 83 - 83: ii1II11I1ii1I
  II1i11i1iIi11 = "p1,a1,c1,k1=('" + iiIIi1 [ 1 ] . split ( ".spli" ) [ 0 ] + ')'
  exec ( II1i11i1iIi11 )
 Ii1IIiiIiiIi = Ii1IIiiIiiIi . split ( '|' )
 iiIIi1 = iiIIi1 [ 1 ] . split ( "))'" )
 if 12 - 12: i1IIi . i1IIi - ii11ii1ii
 if 26 - 26: iIii1I11I1II1 % i11iIiiIii % oO0ooO
 if 67 - 67: OoooooooOO
 if 29 - 29: O0 - i11iIiiIii - oO0OooOoO + ii1II11I1ii1I * Ooo0
 if 2 - 2: i1IIi - oooO + o0Oo . ii11ii1ii * ii11ii1ii / OOooOOo
 if 93 - 93: i1IIi
 if 53 - 53: OoooooooOO + oOo0O0Ooo + iI1Ii11111iIi
 if 24 - 24: ooO0Oooo00 - Ooo0 - ooO0Oooo00 * oO0ooO . OoooooooOO / Ooo0
 if 66 - 66: oOo0O0Ooo
 if 97 - 97: i1IIi - OoooooooOO / O00OoOoo00 * o0Oo
 if 55 - 55: ii11ii1ii . ooO0Oooo00
 if 87 - 87: ii11ii1ii % iIii1I11I1II1
 if 100 - 100: O00OoOoo00 . o0Oo * O00OoOoo00 - o0Oo . oO0o0ooO0 * iiIIIII1i1iI
 if 89 - 89: I1ii11iIi11i + Ooo0 * O00OoOoo00
 if 28 - 28: OoooooooOO . iI1Ii11111iIi % oO0ooO / i1IIi / ii1II11I1ii1I
 if 36 - 36: ii11ii1ii + oO0o0ooO0 - Ooo0 + iIii1I11I1II1 + OoooooooOO
 if 4 - 4: oO0OooOoO . oO0o0ooO0 + iiIIIII1i1iI * O00OoOoo00 . oooO
 if 87 - 87: OOooOOo / I1ii11iIi11i / i11iIiiIii
 if 74 - 74: iI1Ii11111iIi / oO0ooO % ii11ii1ii
 if 88 - 88: OOooOOo - i11iIiiIii % ii11ii1ii * oO0o0ooO0 + oO0ooO
 if 52 - 52: oO0OooOoO . o0Oo + OOooOOo % I1ii11iIi11i
 if 62 - 62: ii11ii1ii
 II = ''
 oOo00OooO0oO = ''
 if 15 - 15: oO0o0ooO0 + iiIIIII1i1iI . ii1II11I1ii1I * I1ii11iIi11i . OOooOOo
 if 18 - 18: i1IIi % oO0OooOoO + O00OoOoo00 % iiIIIII1i1iI
 oOOoO0OO00OOo0 = str ( Ii1IIii ( iI , i111i11I1Ii1I , iI1I11iIIi1 , Ii1IIiiIiiIi , II , oOo00OooO0oO , iteration ) )
 if 21 - 21: OOooOOo / ii11ii1ii * Ooo0 . i1IIi
 if 59 - 59: O0 + i1IIi - ii11ii1ii
 if 62 - 62: i11iIiiIii % ii1II11I1ii1I . Ooo0 . ii1II11I1ii1I
 if 84 - 84: i11iIiiIii * I1ii11iIi11i
 if 18 - 18: ii1II11I1ii1I - iiIIIII1i1iI - OOooOOo / O00OoOoo00 - O0
 if iteration >= totaliterations :
  if 30 - 30: O0 + oO0ooO + oO0OooOoO
  return oOOoO0OO00OOo0
 else :
  if 14 - 14: ii11ii1ii / ii1II11I1ii1I - iIii1I11I1II1 - iI1Ii11111iIi % oooO
  return oo0o0 ( oOOoO0OO00OOo0 , iteration + 1 )
  if 49 - 49: oooO * iI1Ii11111iIi / ii11ii1ii / oOo0O0Ooo * iIii1I11I1II1
def Ii1IIii ( p , a , c , k , e , d , iteration , v = 1 ) :
 if 57 - 57: OOooOOo - iI1Ii11111iIi / oooO % i11iIiiIii
 if 3 - 3: ooO0Oooo00 . oooO % o0Oo + oO0ooO
 if 64 - 64: i1IIi
 while ( c >= 1 ) :
  c = c - 1
  if ( k [ c ] ) :
   IIii1 = str ( IiiiI111I ( c , a ) )
   if v == 1 :
    p = re . sub ( '\\b' + IIii1 + '\\b' , k [ c ] , p )
   else :
    p = III1I11i1iIi ( p , IIii1 , k [ c ] )
    if 69 - 69: oOo0O0Ooo * oO0OooOoO * oooO . ooO0Oooo00 - oO0ooO
    if 39 - 39: iiIIIII1i1iI * o0Oo % I1ii11iIi11i . OOooOOo
    if 24 - 24: i1IIi * iIii1I11I1II1 / iiIIIII1i1iI
    if 78 - 78: i11iIiiIii + ii11ii1ii + O00OoOoo00 / ii11ii1ii % iIii1I11I1II1 % Ooo0
    if 83 - 83: iIii1I11I1II1 % OOooOOo % ii11ii1ii % O00OoOoo00 . oO0ooO % O0
    if 47 - 47: ii11ii1ii
 return p
 if 66 - 66: o0Oo - Ooo0
 if 33 - 33: o0Oo / I1ii11iIi11i
 if 12 - 12: oO0OooOoO
def III1I11i1iIi ( source_str , word_to_find , replace_with ) :
 IiIii1ii = None
 IiIii1ii = source_str . split ( word_to_find )
 if len ( IiIii1ii ) > 1 :
  IIiI1i = [ ]
  iII1 = 0
  for O000O in IiIii1ii :
   if 98 - 98: iIii1I11I1II1 + O00OoOoo00 % OOooOOo + oO0o0ooO0 % OOooOOo
   IIiI1i . append ( O000O )
   IiI1iII1II111 = word_to_find
   if 24 - 24: iI1Ii11111iIi * O00OoOoo00
   if 40 - 40: iiIIIII1i1iI - OOooOOo * OOooOOo . OOooOOo + OoooooooOO
   if iII1 == len ( IiIii1ii ) - 1 :
    IiI1iII1II111 = ''
   else :
    if len ( O000O ) == 0 :
     if ( len ( IiIii1ii [ iII1 + 1 ] ) == 0 and word_to_find [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) or ( len ( IiIii1ii [ iII1 + 1 ] ) > 0 and IiIii1ii [ iII1 + 1 ] [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) :
      IiI1iII1II111 = replace_with
      if 77 - 77: iIii1I11I1II1 . iiIIIII1i1iI % iI1Ii11111iIi / iiIIIII1i1iI
    else :
     if ( IiIii1ii [ iII1 ] [ - 1 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) and ( ( len ( IiIii1ii [ iII1 + 1 ] ) == 0 and word_to_find [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) or ( len ( IiIii1ii [ iII1 + 1 ] ) > 0 and IiIii1ii [ iII1 + 1 ] [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) ) :
      IiI1iII1II111 = replace_with
      if 54 - 54: iI1Ii11111iIi + oooO - oOo0O0Ooo
   IIiI1i . append ( IiI1iII1II111 )
   iII1 += 1
   if 35 - 35: iiIIIII1i1iI - iiIIIII1i1iI + i1IIi - O0 - O00OoOoo00
  source_str = '' . join ( IIiI1i )
 return source_str
 if 58 - 58: OOooOOo - ooO0Oooo00 - OoooooooOO
def o00ii111Iiii ( num , radix ) :
 if 54 - 54: OoooooooOO - o0Oo % oO0ooO
 ooo00Ooo = ""
 if num == 0 : return '0'
 while num > 0 :
  ooo00Ooo = "0123456789abcdefghijklmnopqrstuvwxyz" [ num % radix ] + ooo00Ooo
  num /= radix
 return ooo00Ooo
 if 92 - 92: I1ii11iIi11i * oooO
def IiiiI111I ( cc , a ) :
 IIii1 = "" if cc < a else IiiiI111I ( int ( cc / a ) , a )
 cc = ( cc % a )
 i1iIIi1 = chr ( cc + 29 ) if cc > 35 else str ( o00ii111Iiii ( cc , 36 ) )
 return IIii1 + i1iIIi1
 if 83 - 83: Ooo0 * oO0o0ooO0 / oOo0O0Ooo
 if 32 - 32: ii11ii1ii + OOooOOo - OoooooooOO
def OOO0ooo ( cookieJar ) :
 try :
  Ii11iii1II1i = ""
  for I1ii1Ii1 , o0OOoOO in enumerate ( cookieJar ) :
   Ii11iii1II1i += o0OOoOO . name + "=" + o0OOoOO . value + ";"
 except : pass
 if 46 - 46: iI1Ii11111iIi / ooO0Oooo00 - i1IIi
 return Ii11iii1II1i
 if 51 - 51: oOo0O0Ooo - oO0ooO * oO0o0ooO0
 if 12 - 12: iIii1I11I1II1 % oooO % oooO
def Iii ( cookieJar , COOKIEFILE ) :
 try :
  iiIi1IIiI = os . path . join ( o00 , COOKIEFILE )
  cookieJar . save ( iiIi1IIiI , ignore_discard = True )
 except : pass
 if 78 - 78: Ooo0 . OOooOOo . oO0o0ooO0
def o0iiiI1I1iIIIi1 ( COOKIEFILE ) :
 if 97 - 97: iI1Ii11111iIi
 oOoO0O00oo = None
 if COOKIEFILE :
  try :
   iiIi1IIiI = os . path . join ( o00 , COOKIEFILE )
   oOoO0O00oo = cookielib . LWPCookieJar ( )
   oOoO0O00oo . load ( iiIi1IIiI , ignore_discard = True )
  except :
   oOoO0O00oo = None
   if 93 - 93: oO0ooO % OOooOOo . O0 / ooO0Oooo00 * iI1Ii11111iIi
 if not oOoO0O00oo :
  oOoO0O00oo = cookielib . LWPCookieJar ( )
  if 29 - 29: ii11ii1ii
 return oOoO0O00oo
 if 86 - 86: oO0OooOoO . Ooo0
def IIiI11i1111Ii ( fun_call , page_data , Cookie_Jar ) :
 iIiI = ''
 if oo0ooO0oOOOOo not in sys . path :
  sys . path . append ( oo0ooO0oOOOOo )
  if 81 - 81: OOooOOo % iiIIIII1i1iI
 print fun_call
 try :
  oo0i1iIIi1II1iiI = 'import ' + fun_call . split ( '.' ) [ 0 ]
  print oo0i1iIIi1II1iiI , sys . path
  exec ( oo0i1iIIi1II1iiI )
  print 'done'
 except :
  print 'error in import'
  traceback . print_exc ( file = sys . stdout )
 print 'ret_val=' + fun_call
 exec ( 'ret_val=' + fun_call )
 print iIiI
 if 31 - 31: ii11ii1ii % oO0o0ooO0 + iIii1I11I1II1 + i11iIiiIii * O00OoOoo00
 return str ( iIiI )
 if 45 - 45: ii1II11I1ii1I * O00OoOoo00 . oooO - O00OoOoo00 + Ooo0
def iiI11I1i1i1iI ( url ) :
 iII = i1i11I1I1iii1 ( url )
 OOoO0oO00o = ""
 iiiiii1 = ""
 OO0o0oO0O000o = "<script.*?src=\"(.*?recap.*?)\""
 i11111IIIII = re . findall ( OO0o0oO0O000o , iII )
 I1iI11iii = False
 oo0oO = None
 iiiiii1 = None
 if 50 - 50: OoooooooOO - iIii1I11I1II1 + i1IIi % O00OoOoo00 - iIii1I11I1II1 % O0
 if i11111IIIII and len ( i11111IIIII ) > 0 :
  o0oO0Oo = i11111IIIII [ 0 ]
  I1iI11iii = True
  if 71 - 71: ii11ii1ii - OOooOOo * ooO0Oooo00 + iiIIIII1i1iI % i11iIiiIii - oooO
  o0O0OO0o = 'challenge.*?\'(.*?)\''
  OOOoOoOOoO0oo0O = '\'(.*?)\''
  iiI1I1ii = i1i11I1I1iii1 ( o0oO0Oo )
  OOoO0oO00o = re . findall ( o0O0OO0o , iiI1I1ii ) [ 0 ]
  o00IiI1iiII1i1i = 'http://www.google.com/recaptcha/api/reload?c=' ;
  i1IiI = o0oO0Oo . split ( 'k=' ) [ 1 ]
  o00IiI1iiII1i1i += OOoO0oO00o + '&k=' + i1IiI + '&captcha_k=1&type=image&lang=en-GB'
  o0o0O00 = i1i11I1I1iii1 ( o00IiI1iiII1i1i )
  oo0oO = re . findall ( OOOoOoOOoO0oo0O , o0o0O00 ) [ 0 ]
  oOo000OOooO0O = 'http://www.google.com/recaptcha/api/image?c=' + oo0oO
  if not oOo000OOooO0O . startswith ( "http" ) :
   oOo000OOooO0O = 'http://www.google.com/recaptcha/api/' + oOo000OOooO0O
  import random
  oOooo0O0o = random . randrange ( 100 , 1000 , 5 )
  Ii = os . path . join ( o00 , str ( oOooo0O0o ) + "captcha.img" )
  OoOoooO0O00 = open ( Ii , "wb" )
  OoOoooO0O00 . write ( i1i11I1I1iii1 ( oOo000OOooO0O ) )
  OoOoooO0O00 . close ( )
  oOO0OooO0 = OoooOo ( captcha = Ii )
  iiiiii1 = oOO0OooO0 . get ( )
  os . remove ( Ii )
 return oo0oO , iiiiii1
 if 37 - 37: i1IIi - ii1II11I1ii1I % OoooooooOO / ii1II11I1ii1I % oooO
def i1i11I1I1iii1 ( url , cookieJar = None , post = None , timeout = 20 , headers = None ) :
 if 48 - 48: i11iIiiIii % iI1Ii11111iIi
 if 29 - 29: ooO0Oooo00 + i11iIiiIii % oO0o0ooO0
 oOoOOo0oo0 = urllib2 . HTTPCookieProcessor ( cookieJar )
 o0O0Oo00Oo0o = urllib2 . build_opener ( oOoOOo0oo0 , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
 if 93 - 93: OOooOOo % iIii1I11I1II1
 i1I111I = urllib2 . Request ( url )
 i1I111I . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.154 Safari/537.36' )
 if headers :
  for OooOOOOoO00OoOO , Ooo0o0oo0 in headers :
   i1I111I . add_header ( OooOOOOoO00OoOO , Ooo0o0oo0 )
   if 87 - 87: OOooOOo / Ooo0 + iIii1I11I1II1
 i11I1IIiiIi = o0O0Oo00Oo0o . open ( i1I111I , post , timeout = timeout )
 i1i1i1I = i11I1IIiiIi . read ( )
 i11I1IIiiIi . close ( )
 return i1i1i1I ;
 if 93 - 93: iIii1I11I1II1 + iI1Ii11111iIi % oooO
def iii1IiI1I1 ( str , reg = None ) :
 if reg :
  str = re . findall ( reg , str ) [ 0 ]
 O00o = urllib . unquote ( str [ 0 : len ( str ) - 1 ] ) ;
 oO0o00ooO0OoO = '' ;
 for I1i1iii in range ( len ( O00o ) ) :
  oO0o00ooO0OoO += chr ( ord ( O00o [ I1i1iii ] ) - O00o [ len ( O00o ) - 1 ] ) ;
 oO0o00ooO0OoO = urllib . unquote ( oO0o00ooO0OoO )
 print oO0o00ooO0OoO
 return oO0o00ooO0OoO
 if 1 - 1: OOooOOo . i11iIiiIii % OOooOOo - ooO0Oooo00 % i1IIi + oO0ooO
def oOooOO ( str ) :
 IiiIiIi111iI1 = re . findall ( 'unescape\(\'(.*?)\'' , str )
 print 'js' , IiiIiIi111iI1
 if ( not IiiIiIi111iI1 == None ) and len ( IiiIiIi111iI1 ) > 0 :
  for oOOO0o0ooOo in IiiIiIi111iI1 :
   if 95 - 95: iiIIIII1i1iI % Ooo0 . O0 % O00OoOoo00
   str = str . replace ( oOOO0o0ooOo , urllib . unquote ( oOOO0o0ooOo ) )
 return str
 if 68 - 68: oOo0O0Ooo . oOo0O0Ooo - oO0ooO / oO0o0ooO0 . oooO / i1IIi
iI1i1iIi1iiII = 0
def IIii1i1iii1 ( m , html_page , cookieJar ) :
 global iI1i1iIi1iiII
 iI1i1iIi1iiII += 1
 o0OoO0000o = m [ 'expre' ]
 IIIiIiI11iIi = m [ 'page' ]
 o0Ii1 = re . compile ( '\$LiveStreamCaptcha\[([^\]]*)\]' ) . findall ( o0OoO0000o ) [ 0 ]
 if 50 - 50: iI1Ii11111iIi - oooO / iIii1I11I1II1 - I1ii11iIi11i + oO0OooOoO - O0
 o0oO0Oo = re . compile ( o0Ii1 ) . findall ( html_page ) [ 0 ]
 print o0OoO0000o , o0Ii1 , o0oO0Oo
 if not o0oO0Oo . startswith ( "http" ) :
  oOOOOoO00Ooo0 = 'http://' + "" . join ( IIIiIiI11iIi . split ( '/' ) [ 2 : 3 ] )
  if o0oO0Oo . startswith ( "/" ) :
   o0oO0Oo = oOOOOoO00Ooo0 + o0oO0Oo
  else :
   o0oO0Oo = oOOOOoO00Ooo0 + '/' + o0oO0Oo
   if 18 - 18: oooO + iiIIIII1i1iI
 Ii = os . path . join ( o00 , str ( iI1i1iIi1iiII ) + "captcha.jpg" )
 OoOoooO0O00 = open ( Ii , "wb" )
 print ' c capurl' , o0oO0Oo
 i1I111I = urllib2 . Request ( o0oO0Oo )
 i1I111I . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20100101 Firefox/14.0.1' )
 if 'refer' in m :
  i1I111I . add_header ( 'Referer' , m [ 'refer' ] )
 if 'agent' in m :
  i1I111I . add_header ( 'User-agent' , m [ 'agent' ] )
 if 'setcookie' in m :
  print 'adding cookie' , m [ 'setcookie' ]
  i1I111I . add_header ( 'Cookie' , m [ 'setcookie' ] )
  if 5 - 5: OoooooooOO + oO0o0ooO0 * oO0OooOoO
  if 98 - 98: ii1II11I1ii1I % i1IIi . o0Oo . oO0OooOoO . oO0ooO / i11iIiiIii
  if 32 - 32: ii11ii1ii + o0Oo . O00OoOoo00
  if 41 - 41: OOooOOo . i11iIiiIii / oO0o0ooO0
 urllib2 . urlopen ( i1I111I )
 i11I1IIiiIi = urllib2 . urlopen ( i1I111I )
 if 98 - 98: OOooOOo % oO0OooOoO
 OoOoooO0O00 . write ( i11I1IIiiIi . read ( ) )
 i11I1IIiiIi . close ( )
 OoOoooO0O00 . close ( )
 oOO0OooO0 = OoooOo ( captcha = Ii )
 iiiiii1 = oOO0OooO0 . get ( )
 return iiiiii1
 if 95 - 95: iIii1I11I1II1 - O00OoOoo00 - ii1II11I1ii1I + O00OoOoo00 % oO0ooO . o0Oo
class OoooOo ( xbmcgui . WindowDialog ) :
 def __init__ ( self , * args , ** kwargs ) :
  self . cptloc = kwargs . get ( 'captcha' )
  self . img = xbmcgui . ControlImage ( 335 , 30 , 624 , 60 , self . cptloc )
  self . addControl ( self . img )
  self . kbd = xbmc . Keyboard ( )
  if 41 - 41: O0 + iI1Ii11111iIi . i1IIi - oO0OooOoO * ii11ii1ii . I1ii11iIi11i
 def get ( self ) :
  self . show ( )
  time . sleep ( 2 )
  self . kbd . doModal ( )
  if ( self . kbd . isConfirmed ( ) ) :
   oooO00Oo = self . kbd . getText ( )
   self . close ( )
   return oooO00Oo
  self . close ( )
  return False
  if 86 - 86: oO0OooOoO + oooO + Ooo0
def OOOoO000 ( ) :
 import time
 return str ( int ( time . time ( ) * 1000 ) )
 if 9 - 9: oooO + oO0OooOoO % oooO % Ooo0 + iIii1I11I1II1
def oOOOoo ( ) :
 import time
 return str ( int ( time . time ( ) ) )
 if 59 - 59: i1IIi
def Ii11iI1II11ii ( ) :
 I1oOooo00O = [ ]
 OO0ooo0 = sys . argv [ 2 ]
 if len ( OO0ooo0 ) >= 2 :
  II1II1iI = sys . argv [ 2 ]
  OooooO = II1II1iI . replace ( '?' , '' )
  if ( II1II1iI [ len ( II1II1iI ) - 1 ] == '/' ) :
   II1II1iI = II1II1iI [ 0 : len ( II1II1iI ) - 2 ]
  oO0O0 = OooooO . split ( '&' )
  I1oOooo00O = { }
  for I1i1iii in range ( len ( oO0O0 ) ) :
   iI111i11iI1 = { }
   iI111i11iI1 = oO0O0 [ I1i1iii ] . split ( '=' )
   if ( len ( iI111i11iI1 ) ) == 2 :
    I1oOooo00O [ iI111i11iI1 [ 0 ] ] = iI111i11iI1 [ 1 ]
 return I1oOooo00O
 if 2 - 2: OOooOOo + O00OoOoo00 + OoooooooOO . i1IIi
 if 19 - 19: ooO0Oooo00 - ii11ii1ii - iiIIIII1i1iI - OOooOOo . ooO0Oooo00 . O00OoOoo00
def i11I1I ( ) :
 OoOoO = json . loads ( open ( o0oOoO00o ) . read ( ) )
 iIiii1i111iI1 = len ( OoOoO )
 for I1i1iii in OoOoO :
  iiiI1I11i1 = I1i1iii [ 0 ]
  o0 = I1i1iii [ 1 ]
  oo0ooooo00o = I1i1iii [ 2 ]
  try :
   oOOo0oOo0 = I1i1iii [ 3 ]
   if oOOo0oOo0 == None :
    raise
  except :
   if o0oO0 . getSetting ( 'use_thumb' ) == "true" :
    oOOo0oOo0 = oo0ooooo00o
   else :
    oOOo0oOo0 = ooo
  try : ii11i1iIiII1 = I1i1iii [ 5 ]
  except : ii11i1iIiII1 = None
  try : oooOOoOO = I1i1iii [ 6 ]
  except : oooOOoOO = None
  if 78 - 78: iIii1I11I1II1 . ii11ii1ii % iIii1I11I1II1 . O0 / ii1II11I1ii1I
  if I1i1iii [ 4 ] == 0 :
   I1i1Iiiii ( o0 , iiiI1I11i1 , oo0ooooo00o , oOOo0oOo0 , '' , '' , '' , 'fav' , ii11i1iIiII1 , oooOOoOO , iIiii1i111iI1 )
  else :
   Ii1I ( iiiI1I11i1 , o0 , I1i1iii [ 4 ] , oo0ooooo00o , ooo , '' , '' , '' , '' , 'fav' )
   if 76 - 76: i1IIi * OoooooooOO * O0 + O00OoOoo00 * O00OoOoo00
   if 35 - 35: ii11ii1ii
def ooOoooo0 ( name , url , iconimage , fanart , mode , playlist = None , regexs = None ) :
 OoOoO0oOOooo = [ ]
 try :
  if 99 - 99: iIii1I11I1II1
  name = name . encode ( 'utf-8' , 'ignore' )
 except :
  pass
 if os . path . exists ( o0oOoO00o ) == False :
  o0O0 ( 'Making Favorites File' )
  OoOoO0oOOooo . append ( ( name , url , iconimage , fanart , mode , playlist , regexs ) )
  iIiIi11 = open ( o0oOoO00o , "w" )
  iIiIi11 . write ( json . dumps ( OoOoO0oOOooo ) )
  iIiIi11 . close ( )
 else :
  o0O0 ( 'Appending Favorites' )
  iIiIi11 = open ( o0oOoO00o ) . read ( )
  IiIiIi = json . loads ( iIiIi11 )
  IiIiIi . append ( ( name , url , iconimage , fanart , mode ) )
  O0OOO0OOoO0O = open ( o0oOoO00o , "w" )
  O0OOO0OOoO0O . write ( json . dumps ( IiIiIi ) )
  O0OOO0OOoO0O . close ( )
  if 14 - 14: oO0ooO % o0Oo . oO0OooOoO . o0Oo - oooO
  if 45 - 45: Ooo0 / O0 / OOooOOo * ii1II11I1ii1I
def IiIIiiI ( name ) :
 IiIiIi = json . loads ( open ( o0oOoO00o ) . read ( ) )
 for I1ii1Ii1 in range ( len ( IiIiIi ) ) :
  if IiIiIi [ I1ii1Ii1 ] [ 0 ] == name :
   del IiIiIi [ I1ii1Ii1 ]
   O0OOO0OOoO0O = open ( o0oOoO00o , "w" )
   O0OOO0OOoO0O . write ( json . dumps ( IiIiIi ) )
   O0OOO0OOoO0O . close ( )
   break
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 60 - 60: O00OoOoo00
def I11iII ( url ) :
 if o0oO0 . getSetting ( 'Updatecommonresolvers' ) == 'true' :
  II11iIII1i1I = os . path . join ( Oo0oO0ooo , 'genesisresolvers.py' )
  if xbmcvfs . exists ( II11iIII1i1I ) :
   os . remove ( II11iIII1i1I )
   if 98 - 98: oooO
  Ii11i1Ii1IIII = 'https://raw.githubusercontent.com/lambda81/lambda-addons/master/plugin.video.genesis/commonresolvers.py'
  i1iiI = urllib . urlretrieve ( Ii11i1Ii1IIII , II11iIII1i1I )
  o0oO0 . setSetting ( 'Updatecommonresolvers' , 'false' )
 try :
  import genesisresolvers
 except Exception :
  xbmc . executebuiltin ( "XBMC.Notification(NJMSoccer,Please enable Update Commonresolvers to Play in Settings. - ,10000)" )
  if 63 - 63: O0
 i1I1iIii11 = genesisresolvers . get ( url ) . result
 if url == i1I1iIii11 or i1I1iIii11 is None :
  if 80 - 80: OOooOOo - oO0OooOoO
  xbmc . executebuiltin ( "XBMC.Notification(NJMSoccer,Using Urlresolver module.. - ,5000)" )
  import urlresolver
  I1iI1IiI = urlresolver . HostedMediaFile ( url )
  if I1iI1IiI :
   i1i1Ii1I = urlresolver . resolve ( url )
   i1I1iIii11 = i1i1Ii1I
 if i1I1iIii11 :
  if isinstance ( i1I1iIii11 , list ) :
   for OO00 in i1I1iIii11 :
    I1II1III1 = o0oO0 . getSetting ( 'quality' )
    if OO00 [ 'quality' ] == 'HD' :
     i1i1Ii1I = OO00 [ 'url' ]
     break
    elif OO00 [ 'quality' ] == 'SD' :
     i1i1Ii1I = OO00 [ 'url' ]
    elif OO00 [ 'quality' ] == '1080p' and o0oO0 . getSetting ( '1080pquality' ) == 'true' :
     i1i1Ii1I = OO00 [ 'url' ]
     break
  else :
   i1i1Ii1I = i1I1iIii11
 return i1i1Ii1I
def oooo0O0o0OoOO ( name , mu_playlist ) :
 import urlparse
 if o0oO0 . getSetting ( 'ask_playlist_items' ) == 'true' :
  III1 = [ ]
  for I1i1iii in mu_playlist :
   iiiI1I = urlparse . urlparse ( I1i1iii ) . netloc
   if iiiI1I == '' :
    III1 . append ( name )
   else :
    III1 . append ( iiiI1I )
  iIIII = xbmcgui . Dialog ( )
  I1ii1Ii1 = iIIII . select ( 'Choose a video source' , III1 )
  if I1ii1Ii1 >= 0 :
   if "&mode=19" in mu_playlist [ I1ii1Ii1 ] :
    xbmc . Player ( ) . play ( I11iII ( mu_playlist [ I1ii1Ii1 ] . replace ( '&mode=19' , '' ) ) )
   elif "$doregex" in mu_playlist [ I1ii1Ii1 ] :
    if 91 - 91: oO0ooO % oooO
    i1i1II1I = mu_playlist [ I1ii1Ii1 ] . split ( '&regexs=' )
    if 62 - 62: OOooOOo + iiIIIII1i1iI * ooO0Oooo00
    o0 , i1iIi = OoOIiiiii111i1ii ( i1i1II1I [ 1 ] , i1i1II1I [ 0 ] )
    xbmc . Player ( ) . play ( o0 )
   else :
    o0 = mu_playlist [ I1ii1Ii1 ]
    xbmc . Player ( ) . play ( o0 )
 else :
  ii11i1iIiII1 = xbmc . PlayList ( 1 )
  ii11i1iIiII1 . clear ( )
  oO = 0
  for I1i1iii in mu_playlist :
   oO += 1
   o0ii1iIi1Ii1 = xbmcgui . ListItem ( '%s) %s' % ( str ( oO ) , name ) )
   ii11i1iIiII1 . add ( I1i1iii , o0ii1iIi1Ii1 )
   xbmc . executebuiltin ( 'playlist.playoffset(video,0)' )
   if 66 - 66: I1ii11iIi11i % ii11ii1ii
   if 21 - 21: OOooOOo - OoooooooOO % i11iIiiIii
def Oo00O0OO ( name , url ) :
 if o0oO0 . getSetting ( 'save_location' ) == "" :
  xbmc . executebuiltin ( "XBMC.Notification('NJMSoccer','Choose a location to save files.',15000," + I11i1i11i1I + ")" )
  o0oO0 . openSettings ( )
 II1II1iI = { 'url' : url , 'download_path' : o0oO0 . getSetting ( 'save_location' ) }
 downloader . download ( name , II1II1iI )
 iIIII = xbmcgui . Dialog ( )
 O0O0ooOOO = iIIII . yesno ( 'NJMSoccer' , 'Do you want to add this file as a source?' )
 if O0O0ooOOO :
  I1II1III11iii ( os . path . join ( o0oO0 . getSetting ( 'save_location' ) , name ) )
  if 77 - 77: iI1Ii11111iIi - oOo0O0Ooo - iIii1I11I1II1
  if 16 - 16: I1ii11iIi11i / ooO0Oooo00 / i1IIi . ooO0Oooo00 + iI1Ii11111iIi
def Ii1I ( name , url , mode , iconimage , fanart , description , genre , date , credits , showcontext = False ) :
 if 26 - 26: iIii1I11I1II1 + i1IIi / OOooOOo % oO0ooO
 IiiIi11Ii1iI1 = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name ) + "&fanart=" + urllib . quote_plus ( fanart )
 O00o0 = True
 if date == '' :
  date = None
 else :
  description += '\n\nDate: %s' % date
 OOOoOo = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 OOOoOo . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description , "Genre" : genre , "dateadded" : date , "credits" : credits } )
 OOOoOo . setProperty ( "Fanart_Image" , fanart )
 if showcontext :
  oOo00o = [ ]
  if showcontext == 'source' :
   if name in str ( i11iiII ) :
    oOo00o . append ( ( 'Remove from Sources' , 'XBMC.RunPlugin(%s?mode=8&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
  elif showcontext == 'download' :
   oOo00o . append ( ( 'Download' , 'XBMC.RunPlugin(%s?url=%s&mode=9&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
  elif showcontext == 'fav' :
   oOo00o . append ( ( 'Remove from NJMSoccer Favorites' , 'XBMC.RunPlugin(%s?mode=6&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
   if 12 - 12: ii11ii1ii * O00OoOoo00 % oO0OooOoO * i1IIi * iIii1I11I1II1
  if not name in OoOooOOOO :
   oOo00o . append ( ( 'Add to NJMSoccer Favorites' , 'XBMC.RunPlugin(%s?mode=5&name=%s&url=%s&iconimage=%s&fanart=%s&fav_mode=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) , urllib . quote_plus ( url ) , urllib . quote_plus ( iconimage ) , urllib . quote_plus ( fanart ) , mode ) ) )
  OOOoOo . addContextMenuItems ( oOo00o )
 O00o0 = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = IiiIi11Ii1iI1 , listitem = OOOoOo , isFolder = True )
 if 81 - 81: oOo0O0Ooo - oO0o0ooO0
 return O00o0
def ii1 ( url , title , media_type = 'video' ) :
 if 44 - 44: OOooOOo - oOo0O0Ooo
 if 95 - 95: ii1II11I1ii1I + oooO
 import youtubedl
 if not url == '' :
  if media_type == 'audio' :
   youtubedl . single_YD ( url , download = True , audio = True )
  else :
   youtubedl . single_YD ( url , download = True )
 elif xbmc . Player ( ) . isPlaying ( ) == True :
  import YDStreamExtractor
  if YDStreamExtractor . isDownloading ( ) == True :
   if 88 - 88: oO0o0ooO0 + i11iIiiIii % iI1Ii11111iIi * ii1II11I1ii1I * ii1II11I1ii1I * iiIIIII1i1iI
   YDStreamExtractor . manageDownloads ( )
  else :
   I1I1i = xbmc . Player ( ) . getPlayingFile ( )
   if 87 - 87: O00OoOoo00 + oooO + O0 / i1IIi % Ooo0 / O00OoOoo00
   I1I1i = I1I1i . split ( '|User-Agent=' ) [ 0 ]
   o0ii1iIi1Ii1 = { 'url' : I1I1i , 'title' : title , 'media_type' : media_type }
   youtubedl . single_YD ( '' , download = True , dl_info = o0ii1iIi1Ii1 )
 else :
  xbmc . executebuiltin ( "XBMC.Notification(DOWNLOAD,First Play [COLOR yellow]WHILE playing download[/COLOR] ,10000)" )
  if 64 - 64: I1ii11iIi11i % Ooo0 . O00OoOoo00 % I1ii11iIi11i + oO0o0ooO0 * Ooo0
def OOOO00OooO ( site_name , search_term = None ) :
 I1iI11Ii = ''
 if os . path . exists ( i1 ) == False or o0oO0 . getSetting ( 'clearseachhistory' ) == 'true' :
  OOoO0ooOO ( i1 , '' )
  o0oO0 . setSetting ( "clearseachhistory" , "false" )
 if site_name == 'history' :
  ooO00OO0 = O0O00O000OOO ( i1 )
  i11111IIIII = re . compile ( '(.+?):(.*?)(?:\r|\n)' ) . findall ( ooO00OO0 )
  if 64 - 64: I1ii11iIi11i . o0Oo - OoooooooOO . oooO - ooO0Oooo00
  for iiiI1I11i1 , search_term in i11111IIIII :
   if 'plugin://' in search_term :
    I1i1Iiiii ( search_term , iiiI1I11i1 , I1iI11Ii , '' , '' , '' , '' , '' , None , '' , total = int ( len ( i11111IIIII ) ) )
   else :
    Ii1I ( iiiI1I11i1 + ':' + search_term , iiiI1I11i1 , 26 , I11i1i11i1I , Iiii , '' , '' , '' , '' )
 if not search_term :
  Ii11iII1 = xbmc . Keyboard ( '' , 'Enter Search Term' )
  Ii11iII1 . doModal ( )
  if ( Ii11iII1 . isConfirmed ( ) == False ) :
   return
  search_term = Ii11iII1 . getText ( )
  if len ( search_term ) == 0 :
   return
 search_term = search_term . replace ( ' ' , '+' )
 search_term = search_term . encode ( 'utf-8' )
 if 'youtube' in site_name :
  if 77 - 77: iiIIIII1i1iI % OOooOOo / oO0OooOoO % ooO0Oooo00 % OoooooooOO % I1ii11iIi11i
  import _ytplist
  if 19 - 19: Ooo0 * O00OoOoo00 / iI1Ii11111iIi * O00OoOoo00 - OoooooooOO * oO0o0ooO0
  iiiI1i1 = { }
  iiiI1i1 = _ytplist . YoUTube ( 'searchYT' , youtube = search_term , max_page = 4 , nosave = 'nosave' )
  iIiii1i111iI1 = len ( iiiI1i1 )
  for oO in iiiI1i1 :
   try :
    iiiI1I11i1 = iiiI1i1 [ oO ] [ 'title' ]
    OOoo0O0 = iiiI1i1 [ oO ] [ 'date' ]
    try :
     I1i1i11 = iiiI1i1 [ oO ] [ 'desc' ]
    except Exception :
     I1i1i11 = 'UNAVAIABLE'
     if 29 - 29: Ooo0 . oooO - oO0OooOoO
    o0 = 'plugin://plugin.video.youtube/play/?video_id=' + iiiI1i1 [ oO ] [ 'url' ]
    I1iI11Ii = 'http://img.youtube.com/vi/' + iiiI1i1 [ oO ] [ 'url' ] + '/0.jpg'
    I1i1Iiiii ( o0 , iiiI1I11i1 , I1iI11Ii , '' , '' , '' , '' , '' , None , '' , iIiii1i111iI1 )
   except Exception :
    o0O0 ( 'This item is ignored::' )
  ooooO0 = site_name + ':' + search_term + '\n'
  OOoO0ooOO ( os . path . join ( o00 , 'history' ) , ooooO0 , append = True )
 elif 'dmotion' in site_name :
  Iiii111 = "https://api.dailymotion.com"
  if 71 - 71: O0 / o0Oo . O00OoOoo00 / O00OoOoo00 * oooO
  import _DMsearch
  OooO0OOo = str ( o0oO0 . getSetting ( 'familyFilter' ) )
  _DMsearch . listVideos ( Iiii111 + "/videos?fields=description,duration,id,owner.username,taken_time,thumbnail_large_url,title,views_total&search=" + search_term + "&sort=relevance&limit=100&family_filter=" + OooO0OOo + "&localization=en_EN&page=1" )
  if 51 - 51: iIii1I11I1II1 * ii11ii1ii / iIii1I11I1II1 . iIii1I11I1II1 . ooO0Oooo00 * oO0o0ooO0
  ooooO0 = site_name + ':' + search_term + '\n'
  OOoO0ooOO ( os . path . join ( o00 , 'history' ) , ooooO0 , append = True )
 elif 'IMDBidplay' in site_name :
  Iiii111 = "http://www.omdbapi.com/?t="
  o0 = Iiii111 + search_term
  if 93 - 93: iI1Ii11111iIi * iiIIIII1i1iI
  oo = dict ( { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.3; rv:33.0) Gecko/20100101 Firefox/33.0' , 'Referer' : 'http://joker.org/' , 'Accept-Encoding' : 'gzip, deflate' , 'Content-Type' : 'application/json;charset=utf-8' , 'Accept' : 'application/json, text/plain, */*' } )
  if 27 - 27: o0Oo * oooO
  o0O0oo0OO0O = requests . get ( o0 , headers = oo )
  IiIiIi = o0O0oo0OO0O . json ( )
  oO0ooooo0O00 = IiIiIi [ 'Response' ]
  if oO0ooooo0O00 == 'True' :
   iII11ii1ii = IiIiIi [ 'imdbID' ]
   iiiI1I11i1 = IiIiIi [ 'Title' ] + IiIiIi [ 'Released' ]
   iIIII = xbmcgui . Dialog ( )
   O0O0ooOOO = iIIII . yesno ( 'Check Movie Title' , 'PLAY :: %s ?' % iiiI1I11i1 )
   if O0O0ooOOO :
    o0 = 'plugin://plugin.video.pulsar/movie/' + iII11ii1ii + '/play'
    ooooO0 = iiiI1I11i1 + ':' + o0 + '\n'
    OOoO0ooOO ( i1 , ooooO0 , append = True )
    return o0
  else :
   xbmc . executebuiltin ( "XBMC.Notification(NJMSoccer,No IMDB match found ,7000," + I11i1i11i1I + ")" )
   if 51 - 51: oO0ooO * oO0ooO
def OOo000o0 ( string ) :
 if isinstance ( string , basestring ) :
  if isinstance ( string , unicode ) :
   string = string . encode ( 'ascii' , 'ignore' )
 return string
def o00oo0OO0 ( string , encoding = 'utf-8' ) :
 if isinstance ( string , basestring ) :
  if not isinstance ( string , unicode ) :
   string = unicode ( string , encoding , 'ignore' )
 return string
def oO0o000OooOoo ( s ) : return "" . join ( filter ( lambda IIi11i : ord ( IIi11i ) < 128 , s ) )
if 86 - 86: iiIIIII1i1iI
def IiII1i1iI ( command ) :
 IiIiIi = ''
 try :
  IiIiIi = xbmc . executeJSONRPC ( o00oo0OO0 ( command ) )
 except UnicodeEncodeError :
  IiIiIi = xbmc . executeJSONRPC ( OOo000o0 ( command ) )
  if 84 - 84: Ooo0 + oO0ooO + iiIIIII1i1iI + ooO0Oooo00
 return o00oo0OO0 ( IiIiIi )
 if 62 - 62: i11iIiiIii + OOooOOo + i1IIi
 if 69 - 69: OOooOOo
def IIIII11I1IiI ( ) :
 OO0Oo = xbmc . getSkinDir ( )
 if OO0Oo == 'skin.confluence' :
  xbmc . executebuiltin ( 'Container.SetViewMode(500)' )
 elif OO0Oo == 'skin.aeon.nox' :
  xbmc . executebuiltin ( 'Container.SetViewMode(511)' )
 else :
  xbmc . executebuiltin ( 'Container.SetViewMode(500)' )
  if 13 - 13: ii11ii1ii * i11iIiiIii / i11iIiiIii . I1ii11iIi11i . ii1II11I1ii1I . oO0ooO
  if 26 - 26: ii11ii1ii . iIii1I11I1II1
def oOo0 ( url ) :
 I1Ii11i = o00oo0OO0 ( '{"jsonrpc":"2.0","method":"Files.GetDirectory","params":{"directory":"%s","media":"video","properties":["thumbnail","title","year","dateadded","fanart","rating","season","episode","studio"]},"id":1}' ) % url
 if 19 - 19: Ooo0 - ii11ii1ii . iIii1I11I1II1 . OOooOOo / ii1II11I1ii1I
 OOO0O00Oo = json . loads ( IiII1i1iI ( I1Ii11i ) )
 for I1i1iii in OOO0O00Oo [ 'result' ] [ 'files' ] :
  url = I1i1iii [ 'file' ]
  iiiI1I11i1 = oO0o000OooOoo ( I1i1iii [ 'label' ] )
  I1iI11Ii = oO0o000OooOoo ( I1i1iii [ 'thumbnail' ] )
  try :
   ooo = oO0o000OooOoo ( I1i1iii [ 'fanart' ] )
  except Exception :
   ooo = ''
  try :
   OOoo0O0 = I1i1iii [ 'year' ]
  except Exception :
   OOoo0O0 = ''
  try :
   ii1oOOO0ooOO = I1i1iii [ 'episode' ]
   i11IiI1iiI11 = I1i1iii [ 'season' ]
   if ii1oOOO0ooOO == - 1 or i11IiI1iiI11 == - 1 :
    I1i1i11 = ''
   else :
    I1i1i11 = '[COLOR yellow] S' + str ( i11IiI1iiI11 ) + '[/COLOR][COLOR hotpink] E' + str ( ii1oOOO0ooOO ) + '[/COLOR]'
  except Exception :
   I1i1i11 = ''
  try :
   OOoOOOO00 = I1i1iii [ 'studio' ]
   if OOoOOOO00 :
    I1i1i11 += '\n Studio:[COLOR steelblue] ' + OOoOOOO00 [ 0 ] + '[/COLOR]'
  except Exception :
   OOoOOOO00 = ''
   if 49 - 49: I1ii11iIi11i - O0 / I1ii11iIi11i * OOooOOo + O00OoOoo00
  if I1i1iii [ 'filetype' ] == 'file' :
   I1i1Iiiii ( url , iiiI1I11i1 , I1iI11Ii , ooo , I1i1i11 , '' , OOoo0O0 , '' , None , '' , total = len ( OOO0O00Oo [ 'result' ] [ 'files' ] ) )
   if 35 - 35: oO0OooOoO . o0Oo / i1IIi / o0Oo * iI1Ii11111iIi
   if 85 - 85: oO0OooOoO . oooO % ii1II11I1ii1I % oO0o0ooO0
  else :
   Ii1I ( iiiI1I11i1 , url , 53 , I1iI11Ii , ooo , I1i1i11 , '' , OOoo0O0 , '' )
   if 80 - 80: iI1Ii11111iIi * oO0o0ooO0 / iIii1I11I1II1 % iI1Ii11111iIi / iIii1I11I1II1
   if 42 - 42: i1IIi / i11iIiiIii . oOo0O0Ooo * ooO0Oooo00 . i11iIiiIii * O0
def I1i1Iiiii ( url , name , iconimage , fanart , description , genre , date , showcontext , playlist , regexs , total , setCookie = "" ) :
 if 44 - 44: i1IIi . o0Oo / i11iIiiIii + Ooo0
 oOo00o = [ ]
 try :
  name = name . encode ( 'utf-8' )
 except : pass
 O00o0 = True
 if 27 - 27: ii1II11I1ii1I
 if regexs :
  O0OO0ooO00 = '17'
  if 83 - 83: iIii1I11I1II1
  oOo00o . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif any ( x in url for x in i1IiI1I11 ) and url . startswith ( 'http' ) :
  O0OO0ooO00 = '19'
  if 63 - 63: OoooooooOO * I1ii11iIi11i / oO0o0ooO0 - iI1Ii11111iIi . iIii1I11I1II1 + ooO0Oooo00
  oOo00o . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif url . endswith ( '&mode=18' ) :
  url = url . replace ( '&mode=18' , '' )
  O0OO0ooO00 = '18'
  if 44 - 44: i1IIi % o0Oo % ii11ii1ii
  oOo00o . append ( ( '[COLOR white]!!Download!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=23&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
  if o0oO0 . getSetting ( 'dlaudioonly' ) == 'true' :
   oOo00o . append ( ( '!!Download [COLOR seablue]Audio!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=24&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif url . startswith ( 'magnet:?xt=' ) or '.torrent' in url :
  if 9 - 9: oOo0O0Ooo % OoooooooOO - iiIIIII1i1iI
  if '&' in url and not '&amp;' in url :
   url = url . replace ( '&' , '&amp;' )
  url = 'plugin://plugin.video.pulsar/play?uri=' + url
  O0OO0ooO00 = '12'
  if 43 - 43: I1ii11iIi11i % I1ii11iIi11i
 else :
  O0OO0ooO00 = '12'
  if 46 - 46: oOo0O0Ooo % iIii1I11I1II1 . ooO0Oooo00 . O0 * oooO / OoooooooOO
  oOo00o . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 IiiIi11Ii1iI1 = sys . argv [ 0 ] + "?"
 II1iI1IIi = False
 if 41 - 41: o0Oo - O00OoOoo00 % oO0OooOoO . O00OoOoo00 - oO0o0ooO0
 if playlist :
  if o0oO0 . getSetting ( 'add_playlist' ) == "false" :
   IiiIi11Ii1iI1 += "url=" + urllib . quote_plus ( url ) + "&mode=" + O0OO0ooO00
  else :
   IiiIi11Ii1iI1 += "mode=13&name=%s&playlist=%s" % ( urllib . quote_plus ( name ) , urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) ) )
   name = name + '[COLOR magenta] (' + str ( len ( playlist ) ) + ' items )[/COLOR]'
   II1iI1IIi = True
 else :
  IiiIi11Ii1iI1 += "url=" + urllib . quote_plus ( url ) + "&mode=" + O0OO0ooO00
 if regexs :
  IiiIi11Ii1iI1 += "&regexs=" + regexs
 if not setCookie == '' :
  IiiIi11Ii1iI1 += "&setCookie=" + urllib . quote_plus ( setCookie )
  if 45 - 45: iiIIIII1i1iI - ii1II11I1ii1I
 if date == '' :
  date = None
 else :
  description += '\n\nDate: %s' % date
 OOOoOo = xbmcgui . ListItem ( name , iconImage = "DefaultVideo.png" , thumbnailImage = iconimage )
 OOOoOo . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description , "Genre" : genre , "dateadded" : date } )
 OOOoOo . setProperty ( "Fanart_Image" , fanart )
 if 70 - 70: I1ii11iIi11i % o0Oo / o0Oo . oO0o0ooO0 % oooO . oO0OooOoO
 if ( not II1iI1IIi ) and not any ( x in url for x in IIiIiII11i ) :
  if regexs :
   if '$pyFunction:playmedia(' not in urllib . unquote_plus ( regexs ) and 'notplayable' not in urllib . unquote_plus ( regexs ) :
    if 10 - 10: iiIIIII1i1iI - i11iIiiIii . oO0ooO % i1IIi
    OOOoOo . setProperty ( 'IsPlayable' , 'true' )
  else :
   OOOoOo . setProperty ( 'IsPlayable' , 'true' )
 else :
  o0O0 ( 'NOT setting isplayable' + url )
  if 78 - 78: iIii1I11I1II1 * oOo0O0Ooo . oOo0O0Ooo - ii1II11I1ii1I . iIii1I11I1II1
 if showcontext :
  oOo00o = [ ]
  if showcontext == 'fav' :
   oOo00o . append (
 ( 'Remove from NJMSoccer Favorites' , 'XBMC.RunPlugin(%s?mode=6&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) )
 )
  elif not name in OoOooOOOO :
   I111I1I = (
 '%s?mode=5&name=%s&url=%s&iconimage=%s&fanart=%s&fav_mode=0'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) , urllib . quote_plus ( url ) , urllib . quote_plus ( iconimage ) , urllib . quote_plus ( fanart ) )
 )
   if playlist :
    I111I1I += 'playlist=' + urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) )
   if regexs :
    I111I1I += "&regexs=" + regexs
   oOo00o . append ( ( 'Add to NJMSoccer Favorites' , 'XBMC.RunPlugin(%s)' % I111I1I ) )
  OOOoOo . addContextMenuItems ( oOo00o )
  if 54 - 54: oO0OooOoO + oO0o0ooO0 % oO0o0ooO0 % ii11ii1ii
 if not playlist is None :
  if o0oO0 . getSetting ( 'add_playlist' ) == "false" :
   i1Ii11ii = name . split ( ') ' ) [ 1 ]
   oOOOOOo = [
 ( 'Play ' + i1Ii11ii + ' PlayList' , 'XBMC.RunPlugin(%s?mode=13&name=%s&playlist=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( i1Ii11ii ) , urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) ) ) )
 ]
   OOOoOo . addContextMenuItems ( oOOOOOo )
   if 50 - 50: O00OoOoo00 + oooO + ooO0Oooo00
   if 15 - 15: oO0o0ooO0
 O00o0 = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = IiiIi11Ii1iI1 , listitem = OOOoOo , totalItems = total )
 if 13 - 13: iIii1I11I1II1 * OOooOOo / O00OoOoo00 % oooO + iI1Ii11111iIi
 return O00o0
 if 41 - 41: oO0ooO
def i1iI1i ( url , name , iconimage , setresolved = True ) :
 if setresolved :
  OOOoOo = xbmcgui . ListItem ( name , iconImage = iconimage )
  OOOoOo . setInfo ( type = 'Video' , infoLabels = { 'Title' : name } )
  OOOoOo . setProperty ( "IsPlayable" , "true" )
  OOOoOo . setPath ( str ( url ) )
  xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , OOOoOo )
 else :
  xbmc . executebuiltin ( 'XBMC.RunPlugin(' + url + ')' )
  if 59 - 59: Ooo0
  if 89 - 89: OOooOOo % iIii1I11I1II1
  if 35 - 35: oO0ooO + O00OoOoo00 - OOooOOo % iI1Ii11111iIi % ii11ii1ii % OOooOOo
  if 45 - 45: o0Oo * ii1II11I1ii1I % I1ii11iIi11i
def oO00O0 ( link ) :
 o0 = urllib . urlopen ( link )
 i111I11I = o0 . read ( )
 o0 . close ( )
 OoOoOOoO = i111I11I . split ( "Jetzt" )
 ii1ii1i11I1I = OoOoOOoO [ 1 ] . split ( 'programm/detail.php?const_id=' )
 iiII1iiiiiii = ii1ii1i11I1I [ 1 ] . split ( '<br /><a href="/' )
 iiIiii = iiII1iiiiiii [ 0 ] [ 40 : len ( iiII1iiiiiii [ 0 ] ) ]
 iiI1ii = ii1ii1i11I1I [ 2 ] . split ( "</a></p></div>" )
 O0OooOO = iiI1ii [ 0 ] [ 17 : len ( iiI1ii [ 0 ] ) ]
 O0OooOO = O0OooOO . encode ( 'utf-8' )
 return "  - " + O0OooOO + " - " + iiIiii
 if 49 - 49: Ooo0 / oooO / ii1II11I1ii1I
 if 25 - 25: o0Oo % O0 + i1IIi - oooO
def oOoO00o ( url , regex ) :
 IiIiIi = ooiii11iII ( url )
 try :
  oO = re . findall ( regex , IiIiIi ) [ 0 ]
  return oO
 except :
  o0O0 ( 'regex failed' )
  o0O0 ( regex )
  return
  if 38 - 38: ii11ii1ii % O00OoOoo00 + i11iIiiIii + ooO0Oooo00 + oooO / i11iIiiIii
  if 94 - 94: ooO0Oooo00 - oOo0O0Ooo + iI1Ii11111iIi
xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , 'movies' )
if 59 - 59: oO0o0ooO0 . o0Oo - iIii1I11I1II1 + iIii1I11I1II1
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_UNSORTED )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_LABEL )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_DATE )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_GENRE )
except :
 pass
 if 56 - 56: iI1Ii11111iIi + oooO
II1II1iI = Ii11iI1II11ii ( )
if 32 - 32: oO0OooOoO + OOooOOo % oooO / OOooOOo + oO0ooO
o0 = None
iiiI1I11i1 = None
O0OO0ooO00 = None
ii11i1iIiII1 = None
oo0ooooo00o = None
ooo = Iiii
ii11i1iIiII1 = None
IiI11I111 = None
oooOOoOO = None
if 54 - 54: O0 - ooO0Oooo00 . ii1II11I1ii1I % ooO0Oooo00 + ooO0Oooo00
try :
 o0 = urllib . unquote_plus ( II1II1iI [ "url" ] ) . decode ( 'utf-8' )
except :
 pass
try :
 iiiI1I11i1 = urllib . unquote_plus ( II1II1iI [ "name" ] )
except :
 pass
try :
 oo0ooooo00o = urllib . unquote_plus ( II1II1iI [ "iconimage" ] )
except :
 pass
try :
 ooo = urllib . unquote_plus ( II1II1iI [ "fanart" ] )
except :
 pass
try :
 O0OO0ooO00 = int ( II1II1iI [ "mode" ] )
except :
 pass
try :
 ii11i1iIiII1 = eval ( urllib . unquote_plus ( II1II1iI [ "playlist" ] ) . replace ( '||' , ',' ) )
except :
 pass
try :
 IiI11I111 = int ( II1II1iI [ "fav_mode" ] )
except :
 pass
try :
 oooOOoOO = II1II1iI [ "regexs" ]
except :
 pass
 if 36 - 36: ii1II11I1ii1I % i11iIiiIii
o0O0 ( "Mode: " + str ( O0OO0ooO00 ) )
if not o0 is None :
 o0O0 ( "URL: " + str ( o0 . encode ( 'utf-8' ) ) )
o0O0 ( "Name: " + str ( iiiI1I11i1 ) )
if 47 - 47: i1IIi + oO0OooOoO . oOo0O0Ooo * iI1Ii11111iIi . oO0o0ooO0 / i1IIi
if O0OO0ooO00 == None :
 o0O0 ( "Index" )
 Ooooo0Oo00oO0 ( )
 if 50 - 50: O00OoOoo00 / i1IIi % OoooooooOO
elif O0OO0ooO00 == 1 :
 o0O0 ( "getData" )
 Iiii11I1i1Ii1 ( o0 , ooo )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 83 - 83: oO0ooO * oO0ooO + ii1II11I1ii1I
elif O0OO0ooO00 == 2 :
 o0O0 ( "getChannelItems" )
 O0OO0O ( iiiI1I11i1 , o0 , ooo )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 57 - 57: O0 - O0 . oO0ooO / ii11ii1ii / iiIIIII1i1iI
elif O0OO0ooO00 == 3 :
 o0O0 ( "getSubChannelItems" )
 Ii1I1Ii ( iiiI1I11i1 , o0 , ooo )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 20 - 20: ii1II11I1ii1I * oO0OooOoO - OOooOOo - iI1Ii11111iIi * O00OoOoo00
elif O0OO0ooO00 == 4 :
 o0O0 ( "getFavorites" )
 i11I1I ( )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 6 - 6: oooO + ii1II11I1ii1I / oOo0O0Ooo + Ooo0 % oO0OooOoO / I1ii11iIi11i
elif O0OO0ooO00 == 5 :
 o0O0 ( "addFavorite" )
 try :
  iiiI1I11i1 = iiiI1I11i1 . split ( '\\ ' ) [ 1 ]
 except :
  pass
 try :
  iiiI1I11i1 = iiiI1I11i1 . split ( '  - ' ) [ 0 ]
 except :
  pass
 ooOoooo0 ( iiiI1I11i1 , o0 , oo0ooooo00o , ooo , IiI11I111 )
 if 45 - 45: OoooooooOO
elif O0OO0ooO00 == 6 :
 o0O0 ( "rmFavorite" )
 try :
  iiiI1I11i1 = iiiI1I11i1 . split ( '\\ ' ) [ 1 ]
 except :
  pass
 try :
  iiiI1I11i1 = iiiI1I11i1 . split ( '  - ' ) [ 0 ]
 except :
  pass
 IiIIiiI ( iiiI1I11i1 )
 if 9 - 9: oO0o0ooO0 . I1ii11iIi11i * i1IIi . OoooooooOO
elif O0OO0ooO00 == 7 :
 o0O0 ( "addSource" )
 I1II1III11iii ( o0 )
 if 32 - 32: OOooOOo . oO0ooO % o0Oo - oO0OooOoO
elif O0OO0ooO00 == 8 :
 o0O0 ( "rmSource" )
 O0OoO0O00o0oO ( iiiI1I11i1 )
 if 11 - 11: O0 + o0Oo
elif O0OO0ooO00 == 9 :
 o0O0 ( "download_file" )
 Oo00O0OO ( iiiI1I11i1 , o0 )
 if 80 - 80: iI1Ii11111iIi % iI1Ii11111iIi % O0 - i11iIiiIii . ooO0Oooo00 / O0
elif O0OO0ooO00 == 10 :
 o0O0 ( "getCommunitySources" )
 oo0O ( )
 if 13 - 13: o0Oo + O0 - oO0ooO % oOo0O0Ooo / iiIIIII1i1iI . i1IIi
elif O0OO0ooO00 == 11 :
 o0O0 ( "addSource" )
 I1II1III11iii ( o0 )
 if 60 - 60: oOo0O0Ooo . Ooo0 % o0Oo - O00OoOoo00
elif O0OO0ooO00 == 12 :
 o0O0 ( "setResolvedUrl" )
 if not o0 . startswith ( "plugin://plugin" ) or not any ( x in o0 for x in IIiIiII11i ) :
  oO = xbmcgui . ListItem ( path = o0 )
  xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , oO )
 else :
  print 'Not setting setResolvedUrl'
  xbmc . executebuiltin ( 'XBMC.RunPlugin(' + o0 + ')' )
  if 79 - 79: OoooooooOO / oO0ooO . O0
  if 79 - 79: iI1Ii11111iIi - oO0OooOoO
elif O0OO0ooO00 == 13 :
 o0O0 ( "play_playlist" )
 oooo0O0o0OoOO ( iiiI1I11i1 , ii11i1iIiII1 )
 if 43 - 43: i1IIi + O0 % I1ii11iIi11i / iiIIIII1i1iI * o0Oo
elif O0OO0ooO00 == 14 :
 o0O0 ( "get_xml_database" )
 I1i1IiI1 ( o0 )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 89 - 89: o0Oo . oOo0O0Ooo + oO0ooO . O0 % ii11ii1ii
elif O0OO0ooO00 == 15 :
 o0O0 ( "browse_xml_database" )
 I1i1IiI1 ( o0 , True )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 84 - 84: OoooooooOO + O00OoOoo00 / o0Oo % ii1II11I1ii1I % oO0ooO * o0Oo
elif O0OO0ooO00 == 16 :
 o0O0 ( "browse_community" )
 oo0O ( True )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 58 - 58: I1ii11iIi11i - OOooOOo . i11iIiiIii % i11iIiiIii / i1IIi / iI1Ii11111iIi
elif O0OO0ooO00 == 17 :
 o0O0 ( "getRegexParsed" )
 o0 , i1iIi = OoOIiiiii111i1ii ( oooOOoOO , o0 )
 if o0 :
  i1iI1i ( o0 , iiiI1I11i1 , oo0ooooo00o , i1iIi )
 else :
  xbmc . executebuiltin ( "XBMC.Notification(NJMSoccer,Failed to extract regex. - " + "this" + ",4000," + I11i1i11i1I + ")" )
elif O0OO0ooO00 == 18 :
 o0O0 ( "youtubedl" )
 try :
  import youtubedl
 except Exception :
  xbmc . executebuiltin ( "XBMC.Notification(NJMSoccer,Please [COLOR yellow]install Youtube-dl[/COLOR] module ,10000," ")" )
 I1I1I = youtubedl . single_YD ( o0 )
 i1iI1i ( I1I1I , iiiI1I11i1 , oo0ooooo00o )
elif O0OO0ooO00 == 19 :
 o0O0 ( "Genesiscommonresolvers" )
 i1iI1i ( I11iII ( o0 ) , iiiI1I11i1 , oo0ooooo00o , True )
 if 24 - 24: o0Oo * i1IIi % oooO / O0 + i11iIiiIii
elif O0OO0ooO00 == 21 :
 o0O0 ( "download current file using youtube-dl service" )
 ii1 ( '' , iiiI1I11i1 , 'video' )
elif O0OO0ooO00 == 23 :
 o0O0 ( "get info then download" )
 ii1 ( o0 , iiiI1I11i1 , 'video' )
elif O0OO0ooO00 == 24 :
 o0O0 ( "Audio only youtube download" )
 ii1 ( o0 , iiiI1I11i1 , 'audio' )
elif O0OO0ooO00 == 25 :
 o0O0 ( "YouTube/DMotion" )
 OOOO00OooO ( o0 )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
elif O0OO0ooO00 == 26 :
 o0O0 ( "YouTube/DMotion From Search History" )
 iiiI1I11i1 = iiiI1I11i1 . split ( ':' )
 OOOO00OooO ( o0 , search_term = iiiI1I11i1 [ 1 ] )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
elif O0OO0ooO00 == 27 :
 o0O0 ( "Using IMDB id to play in Pulsar" )
 iI1i = OOOO00OooO ( o0 )
 xbmc . Player ( ) . play ( iI1i )
elif O0OO0ooO00 == 30 :
 oOOoo00O00o ( iiiI1I11i1 , o0 , oo0ooooo00o , ooo )
 if 3 - 3: Ooo0 / oO0o0ooO0
elif O0OO0ooO00 == 40 :
 i1I1IiiIi1i ( )
 IIIII11I1IiI ( )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 34 - 34: i11iIiiIii / O00OoOoo00 * ii1II11I1ii1I . oOo0O0Ooo
elif O0OO0ooO00 == 53 :
 o0O0 ( "Requesting JSON-RPC Items" )
 oOo0 ( o0 )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 79 - 79: O00OoOoo00
elif O0OO0ooO00 == 53 :
 Movies123 ( )
 if 31 - 31: ii1II11I1ii1I % O00OoOoo00
 if 98 - 98: Ooo0 * iIii1I11I1II1 . iiIIIII1i1iI * oOo0O0Ooo / oO0ooO + oooO
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
]')